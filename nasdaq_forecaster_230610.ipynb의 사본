{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"WQtSq-0FpKcf","executionInfo":{"status":"ok","timestamp":1688632818212,"user_tz":-540,"elapsed":484,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","# from yahoo_fin import options\n","import yfinance as yf\n","from datetime import datetime, timedelta\n","from datetime import date\n","from dateutil.parser import parse # 데이트 형식 자동변환\n","from copy import copy\n","from scipy.spatial import distance\n","from dateutil.relativedelta import relativedelta"]},{"cell_type":"markdown","metadata":{"id":"7lFxQQ6xrNHZ"},"source":["## 1. functions"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"cwd7z4xwrNeb","executionInfo":{"status":"ok","timestamp":1688632823873,"user_tz":-540,"elapsed":6,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 주가, 거래량 데이터 받는 함수\n","def get_fin_data(ticker, period):\n","    # yahoo finance에서 데이터 불러오기\n","    df = pd.DataFrame(yf.download(tickers=ticker, period=period)[['Adj Close','Volume']])\n","    df.rename(columns = {'Adj Close':'price'},inplace=True)\n","\n","    return df"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"AuyTQWqHrOCK","executionInfo":{"status":"ok","timestamp":1688632829442,"user_tz":-540,"elapsed":321,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 과거 대비 수익률 데이터 & 미래 수익률 데이터\n","def cal_return(df, window_sizes, future):\n","    df_return =copy(df)\n","    train_col = [] # train data 들어갈 것\n","    test_col = [] # 실제 비교할 data에 들어갈 것\n","\n","    # window 사이즈만큼 이동한 주가 데이터\n","    for window in window_sizes:\n","        df_return[f'p_b{window}'] = df['price'].shift(window)\n","\n","    # 과거 대비 로그 평균 수익률 데이터\n","    for window in window_sizes:\n","        df_return[f'return_b{window}'] = (np.log(df['price']) - np.log(df_return[f'p_b{window}'])) / window\n","        train_col.append(f'return_b{window}')\n","\n","    # 미래만큼 이동한 데이터\n","    for after in future:\n","        df_return[f'p_a{after}'] = df['price'].shift(-after)\n","\n","    # 미래 일반(로그x) 수익률\n","    for after in future:\n","        df_return[f'return_a{after}'] = (df_return[f'p_a{after}']) / (df_return['price']) -1\n","        test_col.append(f'return_a{after}')\n","\n","    train_df = df_return[train_col]\n","    test_df = df_return[test_col]\n","\n","    return train_df, test_df"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"GXD0KryCrORt","executionInfo":{"status":"ok","timestamp":1688632837172,"user_tz":-540,"elapsed":383,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 거래량 z-score 구하기\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_zscore(df, vol_len, scale):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_df[f'vol_mean{window}'] = df['Volume'].rolling(window).mean()\n","        vol_df[f'vol_std{window}'] = df['Volume'].rolling(window).std()\n","        vol_df[f'vol_z{window}'] = (df['Volume'].rolling(vol_len).median() - vol_df[f'vol_mean{window}']) / vol_df[f'vol_std{window}']\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df\n","\n","# 거래량의 스케일된 점수\n","# 최근 N 기간의 거래량대비 최근 k일간의 거래량으로 scale down\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_scaled_zscore(df, scale = [20, 40, 60, 80, 100, 120], std_scale = 240, base_N = 1000):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_mean_scaled = df['Volume'].rolling(window).mean() / df['Volume'].rolling(base_N).mean() # 이 값은 평균 1에서 오실레이트 할 것임.\n","        vol_df[f'vol_z{window}'] = vol_mean_scaled / vol_mean_scaled.rolling(std_scale).std() # 스케일된 vol_mean을 위에서 오실레이트 하는 수준의 std로 나누기\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"oe71Pi19ucuO","executionInfo":{"status":"ok","timestamp":1688632839923,"user_tz":-540,"elapsed":3,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 유사도 구하는 방식 L1, L2\n","def calculate_l2_distance(start_value, target_value):\n","    squared_diff = np.power(start_value - target_value, 2)\n","    sum_squared_diff = np.sum(squared_diff)\n","    l2_distance = np.sqrt(sum_squared_diff)\n","    return l2_distance\n","\n","def calculate_l1_distance(start_value, target_value):\n","    abs_diff = np.abs(start_value - target_value)\n","    l1_distance = np.sum(abs_diff)\n","    return l1_distance"]},{"cell_type":"code","source":["def extract_closest_indices(df, train_df, raw_target_index, future_window, n=5, distance_metric='l1'):\n","    df_index = pd.to_datetime(train_df.index) # train_df의 index를 datatime 형식으로.\n","    distances = {}\n","    #raw_target_index = pd.to_datetime(raw_target_index)\n","\n","    # raw target index를 df에 있는 인덱스로 변환\n","    if raw_target_index not in df_index:\n","        new_index = df_index[df_index <= raw_target_index][-1]\n","        # print(f\"your target date {raw_target_index} is replaced to {new_index}\")\n","        target_index = new_index\n","    else:\n","        target_index = copy(raw_target_index)#.copy()\n","\n","    target_value = train_df.loc[target_index].values#[0]\n","\n","    # L1 & L2 중 선택한 방법 방식 불러오기\n","    if distance_metric == 'l1':\n","        distance_function = calculate_l1_distance\n","    elif distance_metric == 'l2':\n","        distance_function = calculate_l2_distance\n","    else:\n","        raise ValueError(\"Invalid distance metric. Use 'l1' or 'l2'.\")\n","\n","    # target index와 과거의 index와 거리 계산\n","    for index in train_df.index:\n","        if index != target_index and index < target_index:\n","            distance = distance_function(train_df.loc[index].values, target_value)\n","            distances[index] = distance\n","    # 거리 기준 n 개 추출\n","    closest_indices = sorted(distances, key=distances.get)[:n]\n","    returns = np.zeros((len(closest_indices), len(future_window)))\n","\n","    # 추출된 인덱스의 수익률 계산\n","    for i, index in enumerate(closest_indices):\n","      for j, window in enumerate(future_window):\n","          return_value = (df.at[train_df.index[train_df.index >= index][window], 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","          returns[i, j] = return_value\n","\n","    # 수정 전\n","    # for i, index in enumerate(closest_indices):\n","    #     for j, window in enumerate(future_window):\n","    #         if index + pd.DateOffset(days=window) in train_df.index:\n","    #             return_value = (df.at[index + pd.DateOffset(days=window), 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","    #         else:\n","    #             closest_date = df_index[df_index <= index][-1]\n","    #             next_index = df_index[df_index <= (closest_date + pd.DateOffset(days=window))][-1]\n","    #             return_value = (df.at[next_index, 'price'] - df.at[closest_date, 'price']) / df.at[closest_date, 'price']\n","    #         returns[i, j] = return_value\n","\n","    # 각 컬럼의 mean, std\n","\n","    returns_df = pd.DataFrame(returns, columns=['return_{}'.format(window) for window in future_window])\n","    mean = returns_df.mean()\n","    std = returns_df.std()\n","\n","    results = []\n","    for col in returns_df.columns:\n","        results.extend([mean[col], std[col]])\n","\n","    real_results = []\n","    for window in future_window:\n","        # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","        next_date = train_df.index[train_df.index >= target_index][window]\n","        # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","        real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","        real_results.append(real_return)\n","\n","    # for window in future_window:\n","    #     # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","    #     next_date = train_df.index[train_df.index >= target_index][window]\n","    #     # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","    #     real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","    #     results.append(real_return)\n","\n","\n","    return results, real_results"],"metadata":{"id":"etPtS1btwQ37","executionInfo":{"status":"ok","timestamp":1688632846215,"user_tz":-540,"elapsed":3,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"id":"IklfOQHsi6Ii","executionInfo":{"status":"ok","timestamp":1688632849365,"user_tz":-540,"elapsed":7,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["def calculate_returns(start_date, end_date, df, train_df, future_window):\n","    result_columns = []\n","    for window in future_window:\n","        result_columns.extend(['return_{}'.format(window), 'mean_{}'.format(window), 'std_{}'.format(window)])\n","\n","    result_df = pd.DataFrame(columns=result_columns)\n","\n","    df_index = pd.to_datetime(df.index)\n","    start_date = pd.to_datetime(start_date)\n","    end_date = pd.to_datetime(end_date)\n","\n","    if start_date not in df_index:\n","        closest_start_date = df_index[df_index <= start_date][-1]\n","        start_date = df_index[df_index == closest_start_date][0]\n","\n","    if end_date not in df_index:\n","        closest_end_date = df_index[df_index >= end_date][0]\n","        end_date = df_index[df_index == closest_end_date][0]\n","\n","    current_index = start_date\n","\n","    while current_index <= end_date:\n","        results, real_results = extract_closest_indices(df, train_df, current_index, future_window)\n","        for i, window in enumerate(future_window):\n","            result_df.loc[current_index, 'return_{}'.format(window)] = real_results[i]\n","            result_df.loc[current_index, 'mean_{}'.format(window)] = results[i*2]\n","            result_df.loc[current_index, 'std_{}'.format(window)] = results[i*2-1]\n","            # result_df.loc[current_index, 'return_{}'.format(window)] = results[-(4-i)]\n","            # result_df.loc[current_index, 'mean_{}'.format(window)] = results[2*i]\n","            # result_df.loc[current_index, 'std_{}'.format(window)] = results[2*i+1]\n","\n","        current_index = df_index[df_index >= current_index][0]\n","        current_index += pd.DateOffset(days=1)\n","\n","    result_df = result_df[result_df.index.isin(df.index)]\n","\n","    return result_df"]},{"cell_type":"code","source":[],"metadata":{"id":"-Xa3Wzu8OHPV"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"FlWmdft3JsED","executionInfo":{"status":"ok","timestamp":1688632852579,"user_tz":-540,"elapsed":317,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 실제 수익률이랑 같은 방향인지 체크\n","def check_sign(x, y):\n","    if (x * y) > 0:\n","        return True\n","    else:\n","        return False"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"LaTaKD9AJrkn","executionInfo":{"status":"ok","timestamp":1688632854609,"user_tz":-540,"elapsed":7,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# 실제 미래 수익률값과 비교해봤을 때 얼마나 잘 맞췄는지 확인\n","def check_result(return_df, future_window):\n","    result_dict = {}\n","\n","    for window in future_window:\n","        result_dict['result_{}'.format(window)] = {\n","            'good_{}'.format(window): 0,\n","            'bad_{}'.format(window): 0,\n","            'soso_{}'.format(window): 0,\n","            'large_std_{}'.format(window): 0,\n","            # 'false_positive_len'.format(window):0,\n","            # 'false_positive_mean'.format(window):0,\n","            # 'false_positive_std'.format(window):0,\n","            # 'false_negative_len'.format(window):0,\n","            # 'false_negative_mean'.format(window):0,\n","            # 'false_negative_std'.format(window):0,\n","            'false_mean'.format(window):0,\n","            'false_std'.format(window):0\n","            }\n","\n","\n","    for window in future_window:\n","        # bad, real_return > mean_return\n","        # plus_error = []\n","        # bad, real_return < mean_return\n","        # minus_error = []\n","        # total bad\n","        total_error = []\n","        for i in range(len(return_df)):\n","            real_return = return_df['return_{}'.format(window)][i]\n","            mean_return = return_df['mean_{}'.format(window)][i]\n","            std = return_df['std_{}'.format(window)][i]\n","            # mean - std: minus_std, mean + std: plus_std\n","            minus_std = mean_return - std\n","            plus_std = mean_return + std\n","\n","            # 표준편차가 클 때(5% 기준)\n","            if std >= 0.05:\n","                result_dict['result_{}'.format(window)]['large_std_{}'.format(window)] += 1\n","            # 방향성 같은지 체크\n","            elif check_sign(real_return, mean_return):\n","                # 방향성 같고, range 안에 있을 때\n","                if (real_return > minus_std) and (mean_return < plus_std):\n","                    result_dict['result_{}'.format(window)]['good_{}'.format(window)] += 1\n","                # 방향성 같은데, range 밖에 있을 때\n","                else:\n","                    result_dict['result_{}'.format(window)]['soso_{}'.format(window)] += 1\n","            else:\n","                result_dict['result_{}'.format(window)]['bad_{}'.format(window)] += 1\n","                # if real_return> mean_return:\n","                #     # plus_error.append(real_return - mean_return)\n","                # else:\n","                #     # minus_error.append(real_return - mean_return)\n","            total_error.append(real_return - mean_return)\n","\n","        # result_dict['result_{}'.format(window)]['false_positive_len'.format(window)]=len(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_mean'.format(window)]=np.mean(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_std'.format(window)]=np.std(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_negative_len'.format(window)]=len(minus_error)\n","        # result_dict['result_{}'.format(window)]['false_negative_mean'.format(window)]=np.mean(minus_error)\n","        # result_dict['result_{}'.format(window)]['false_negative_std'.format(window)]=np.std(minus_error)\n","        result_dict['result_{}'.format(window)]['false_mean'.format(window)]=np.mean(total_error)\n","        result_dict['result_{}'.format(window)]['false_std'.format(window)]=np.std(total_error)\n","\n","    return result_dict"]},{"cell_type":"markdown","metadata":{"id":"WNxS6hM4qXkK"},"source":["## 2. data preprocessing"]},{"cell_type":"markdown","metadata":{"id":"NFNtU71dt9zo"},"source":["### price data"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"qkQI7n_lr6bM","outputId":"1c820dfc-8211-488e-c575-b9220428ecc0","executionInfo":{"status":"ok","timestamp":1688632857855,"user_tz":-540,"elapsed":532,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\r[*********************100%***********************]  1 of 1 completed\n"]},{"output_type":"execute_result","data":{"text/plain":["                   price      Volume\n","Date                                \n","1971-02-05    100.000000           0\n","1971-02-08    100.839996           0\n","1971-02-09    100.760002           0\n","1971-02-10    100.690002           0\n","1971-02-11    101.449997           0\n","...                  ...         ...\n","2023-06-28  13591.750000  4533270000\n","2023-06-29  13591.330078  4388140000\n","2023-06-30  13787.919922  4661120000\n","2023-07-03  13816.769531  2902300000\n","2023-07-05  13791.650391  5339340000\n","\n","[13217 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-3c4e748e-90d0-438e-85bd-3f0dd8846489\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>Volume</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>100.000000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>100.839996</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>100.760002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>100.690002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>101.449997</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>13591.750000</td>\n","      <td>4533270000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>13591.330078</td>\n","      <td>4388140000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>13787.919922</td>\n","      <td>4661120000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>13816.769531</td>\n","      <td>2902300000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>13791.650391</td>\n","      <td>5339340000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13217 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c4e748e-90d0-438e-85bd-3f0dd8846489')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3c4e748e-90d0-438e-85bd-3f0dd8846489 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3c4e748e-90d0-438e-85bd-3f0dd8846489');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}],"source":["# download data\n","ticker = \"^IXIC\"\n","period = \"max\" # period: max, 1y, 5y etc.\n","\n","nasdaq = get_fin_data(ticker, period)\n","nasdaq"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"6XbrqKrOozfI","executionInfo":{"status":"ok","timestamp":1688632862476,"user_tz":-540,"elapsed":492,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["nasdaq.index = pd.to_datetime(nasdaq.index)"]},{"cell_type":"code","execution_count":12,"metadata":{"id":"9Q3CfeVUr1Tc","executionInfo":{"status":"ok","timestamp":1688632864576,"user_tz":-540,"elapsed":7,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[],"source":["# parameters\n","today = nasdaq.index[-1]#.date()\n","year = today - relativedelta(years=20)\n","window_sizes = [20, 40, 60, 80, 100]\n","future_window = [5, 10] # future 이후 수익률\n","sort_num = 30 # 유사도 sorting 할 길이"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":883},"id":"pLH1sRDit1z1","outputId":"dc89931f-165a-4080-8160-53018f1fb111","executionInfo":{"status":"ok","timestamp":1688632868246,"user_tz":-540,"elapsed":663,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100\n","Date                                                                   \n","1971-02-05         NaN         NaN         NaN         NaN          NaN\n","1971-02-08         NaN         NaN         NaN         NaN          NaN\n","1971-02-09         NaN         NaN         NaN         NaN          NaN\n","1971-02-10         NaN         NaN         NaN         NaN          NaN\n","1971-02-11         NaN         NaN         NaN         NaN          NaN\n","...                ...         ...         ...         ...          ...\n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080\n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239\n","2023-06-30    0.002555    0.003419    0.002140    0.002235     0.001483\n","2023-07-03    0.002129    0.003595    0.002354    0.002212     0.001315\n","2023-07-05    0.002081    0.002993    0.002198    0.002448     0.001466\n","\n","[13217 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-f3835012-88c6-4cae-b18f-2412114eb3d3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>0.002555</td>\n","      <td>0.003419</td>\n","      <td>0.002140</td>\n","      <td>0.002235</td>\n","      <td>0.001483</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>0.002129</td>\n","      <td>0.003595</td>\n","      <td>0.002354</td>\n","      <td>0.002212</td>\n","      <td>0.001315</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>0.002081</td>\n","      <td>0.002993</td>\n","      <td>0.002198</td>\n","      <td>0.002448</td>\n","      <td>0.001466</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13217 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3835012-88c6-4cae-b18f-2412114eb3d3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f3835012-88c6-4cae-b18f-2412114eb3d3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f3835012-88c6-4cae-b18f-2412114eb3d3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["            return_a5  return_a10\n","Date                             \n","1971-02-05   0.020500   -0.003200\n","1971-02-08   0.013388   -0.011107\n","1971-02-09   0.009726   -0.001191\n","1971-02-10   0.007250    0.005363\n","1971-02-11  -0.007393   -0.001084\n","...               ...         ...\n","2023-06-28        NaN         NaN\n","2023-06-29        NaN         NaN\n","2023-06-30        NaN         NaN\n","2023-07-03        NaN         NaN\n","2023-07-05        NaN         NaN\n","\n","[13217 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-83a5729c-4148-426e-a6d3-36fb42b29fe6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_a5</th>\n","      <th>return_a10</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>0.020500</td>\n","      <td>-0.003200</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>0.013388</td>\n","      <td>-0.011107</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>0.009726</td>\n","      <td>-0.001191</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>0.007250</td>\n","      <td>0.005363</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>-0.007393</td>\n","      <td>-0.001084</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13217 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83a5729c-4148-426e-a6d3-36fb42b29fe6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-83a5729c-4148-426e-a6d3-36fb42b29fe6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-83a5729c-4148-426e-a6d3-36fb42b29fe6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}],"source":["# window size만큼 과거 대비 수익률, future 만큼 미래 수익률\n","train_df, test_df = cal_return(nasdaq, window_sizes, future_window)\n","\n","display(train_df)\n","test_df"]},{"cell_type":"markdown","metadata":{"id":"UaH5lsuMt2Yi"},"source":["### volume data"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"00FzndsWt2kS","outputId":"3414b868-57e0-49cd-b599-aab1cd86a7f5","executionInfo":{"status":"ok","timestamp":1688632871874,"user_tz":-540,"elapsed":492,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            vol_z100  vol_z200\n","Date                          \n","1971-02-05       NaN       NaN\n","1971-02-08       NaN       NaN\n","1971-02-09       NaN       NaN\n","1971-02-10       NaN       NaN\n","1971-02-11       NaN       NaN\n","...              ...       ...\n","2023-06-28 -0.597521 -0.535667\n","2023-06-29 -0.579692 -0.537987\n","2023-06-30 -0.569047 -0.534505\n","2023-07-03 -0.513169 -0.512772\n","2023-07-05 -0.516258 -0.515875\n","\n","[13217 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-580bac0a-f058-496e-93b8-8273453607d8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>-0.569047</td>\n","      <td>-0.534505</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>-0.513169</td>\n","      <td>-0.512772</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>-0.516258</td>\n","      <td>-0.515875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13217 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-580bac0a-f058-496e-93b8-8273453607d8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-580bac0a-f058-496e-93b8-8273453607d8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-580bac0a-f058-496e-93b8-8273453607d8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}],"source":["scale = [100, 200] # 이동평균 날짜 길이\n","vol_len = 5 # z-score 분자 데이터 이동평균할 날짜 길이\n","# scale 이동평균 대비 거래량 z-score 구하기\n","nasdaq_vol_df = vol_zscore(nasdaq, vol_len, scale)\n","nasdaq_vol_df"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"E7WkCw2UuScy","outputId":"6e8aa510-29d5-4b40-dae0-3b9aecf7dee6","executionInfo":{"status":"ok","timestamp":1688632876635,"user_tz":-540,"elapsed":356,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","1971-02-05         NaN         NaN         NaN         NaN          NaN   \n","1971-02-08         NaN         NaN         NaN         NaN          NaN   \n","1971-02-09         NaN         NaN         NaN         NaN          NaN   \n","1971-02-10         NaN         NaN         NaN         NaN          NaN   \n","1971-02-11         NaN         NaN         NaN         NaN          NaN   \n","...                ...         ...         ...         ...          ...   \n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080   \n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239   \n","2023-06-30    0.002555    0.003419    0.002140    0.002235     0.001483   \n","2023-07-03    0.002129    0.003595    0.002354    0.002212     0.001315   \n","2023-07-05    0.002081    0.002993    0.002198    0.002448     0.001466   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","1971-02-05       NaN       NaN  \n","1971-02-08       NaN       NaN  \n","1971-02-09       NaN       NaN  \n","1971-02-10       NaN       NaN  \n","1971-02-11       NaN       NaN  \n","...              ...       ...  \n","2023-06-28 -0.597521 -0.535667  \n","2023-06-29 -0.579692 -0.537987  \n","2023-06-30 -0.569047 -0.534505  \n","2023-07-03 -0.513169 -0.512772  \n","2023-07-05 -0.516258 -0.515875  \n","\n","[13217 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-2eb082a9-a2bf-467f-b20c-126d511e98c0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>0.002555</td>\n","      <td>0.003419</td>\n","      <td>0.002140</td>\n","      <td>0.002235</td>\n","      <td>0.001483</td>\n","      <td>-0.569047</td>\n","      <td>-0.534505</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>0.002129</td>\n","      <td>0.003595</td>\n","      <td>0.002354</td>\n","      <td>0.002212</td>\n","      <td>0.001315</td>\n","      <td>-0.513169</td>\n","      <td>-0.512772</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>0.002081</td>\n","      <td>0.002993</td>\n","      <td>0.002198</td>\n","      <td>0.002448</td>\n","      <td>0.001466</td>\n","      <td>-0.516258</td>\n","      <td>-0.515875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13217 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2eb082a9-a2bf-467f-b20c-126d511e98c0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2eb082a9-a2bf-467f-b20c-126d511e98c0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2eb082a9-a2bf-467f-b20c-126d511e98c0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}],"source":["# train_df에 거래량 feature도 추가\n","train_df = pd.merge(train_df, nasdaq_vol_df, left_index=True, right_index=True)\n","train_df"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"AamEH0H0uTN3","outputId":"a788bda2-85f4-4caa-f24d-edd5755b3232","executionInfo":{"status":"ok","timestamp":1688632878734,"user_tz":-540,"elapsed":9,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","2003-07-07    0.002787    0.003604    0.003961    0.003706     0.002839   \n","2003-07-08    0.004255    0.003470    0.004100    0.003304     0.003115   \n","2003-07-09    0.003551    0.003137    0.004192    0.003316     0.003133   \n","2003-07-10    0.002078    0.002708    0.003571    0.002612     0.002698   \n","2003-07-11    0.002371    0.003048    0.003673    0.002669     0.002529   \n","...                ...         ...         ...         ...          ...   \n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080   \n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239   \n","2023-06-30    0.002555    0.003419    0.002140    0.002235     0.001483   \n","2023-07-03    0.002129    0.003595    0.002354    0.002212     0.001315   \n","2023-07-05    0.002081    0.002993    0.002198    0.002448     0.001466   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","2003-07-07  0.467229  0.602078  \n","2003-07-08  0.571847  0.725937  \n","2003-07-09  0.633855  0.809818  \n","2003-07-10  0.536101  0.712930  \n","2003-07-11  0.532265  0.715154  \n","...              ...       ...  \n","2023-06-28 -0.597521 -0.535667  \n","2023-06-29 -0.579692 -0.537987  \n","2023-06-30 -0.569047 -0.534505  \n","2023-07-03 -0.513169 -0.512772  \n","2023-07-05 -0.516258 -0.515875  \n","\n","[5034 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-90fc9620-cbd1-46ef-b8d4-35102772ac3f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2003-07-07</th>\n","      <td>0.002787</td>\n","      <td>0.003604</td>\n","      <td>0.003961</td>\n","      <td>0.003706</td>\n","      <td>0.002839</td>\n","      <td>0.467229</td>\n","      <td>0.602078</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-08</th>\n","      <td>0.004255</td>\n","      <td>0.003470</td>\n","      <td>0.004100</td>\n","      <td>0.003304</td>\n","      <td>0.003115</td>\n","      <td>0.571847</td>\n","      <td>0.725937</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-09</th>\n","      <td>0.003551</td>\n","      <td>0.003137</td>\n","      <td>0.004192</td>\n","      <td>0.003316</td>\n","      <td>0.003133</td>\n","      <td>0.633855</td>\n","      <td>0.809818</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-10</th>\n","      <td>0.002078</td>\n","      <td>0.002708</td>\n","      <td>0.003571</td>\n","      <td>0.002612</td>\n","      <td>0.002698</td>\n","      <td>0.536101</td>\n","      <td>0.712930</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-11</th>\n","      <td>0.002371</td>\n","      <td>0.003048</td>\n","      <td>0.003673</td>\n","      <td>0.002669</td>\n","      <td>0.002529</td>\n","      <td>0.532265</td>\n","      <td>0.715154</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-30</th>\n","      <td>0.002555</td>\n","      <td>0.003419</td>\n","      <td>0.002140</td>\n","      <td>0.002235</td>\n","      <td>0.001483</td>\n","      <td>-0.569047</td>\n","      <td>-0.534505</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-03</th>\n","      <td>0.002129</td>\n","      <td>0.003595</td>\n","      <td>0.002354</td>\n","      <td>0.002212</td>\n","      <td>0.001315</td>\n","      <td>-0.513169</td>\n","      <td>-0.512772</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-05</th>\n","      <td>0.002081</td>\n","      <td>0.002993</td>\n","      <td>0.002198</td>\n","      <td>0.002448</td>\n","      <td>0.001466</td>\n","      <td>-0.516258</td>\n","      <td>-0.515875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5034 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90fc9620-cbd1-46ef-b8d4-35102772ac3f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-90fc9620-cbd1-46ef-b8d4-35102772ac3f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-90fc9620-cbd1-46ef-b8d4-35102772ac3f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["# 최근 20년 데이터만 추출\n","train_20df = train_df[year:]\n","\n","train_20df"]},{"cell_type":"markdown","metadata":{"id":"KlClwKxNuTXR"},"source":["## backtest"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"xUac4_NGuv08","outputId":"4090ead6-ba65-44de-9012-6a6f1e12376f","executionInfo":{"status":"ok","timestamp":1688633173793,"user_tz":-540,"elapsed":286406,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_5    mean_5     std_5 return_10   mean_10    std_10\n","2015-12-31 -0.072648 -0.014181  0.046202 -0.103644 -0.009286  0.034617\n","2016-01-05 -0.042014  0.009491  0.018942 -0.085811   0.01795  0.014767\n","2016-01-06 -0.064044  0.004135  0.037001  -0.07521 -0.025753  0.030047\n","2016-01-07 -0.015872  0.012473  0.010846 -0.020951  0.016587  0.014533\n","2016-01-08 -0.033424 -0.020473  0.037395 -0.026949 -0.027099  0.045662\n","...              ...       ...       ...       ...       ...       ...\n","2019-12-19  0.013435   0.01778  0.036433  0.020732  0.011884  0.017231\n","2019-12-20  0.002356 -0.007312  0.022023  0.016092 -0.012251   0.02604\n","2019-12-24   0.01556 -0.009736  0.028349  0.027985 -0.003824  0.023588\n","2019-12-27    0.0072  0.015014  0.022649  0.029679  0.020781  0.010357\n","2019-12-31  0.017458  0.013462  0.023546  0.031886  0.024248   0.01094\n","\n","[787 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-260d91c5-bab9-467a-98a1-0d5f7dc0ee62\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_5</th>\n","      <th>mean_5</th>\n","      <th>std_5</th>\n","      <th>return_10</th>\n","      <th>mean_10</th>\n","      <th>std_10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-12-31</th>\n","      <td>-0.072648</td>\n","      <td>-0.014181</td>\n","      <td>0.046202</td>\n","      <td>-0.103644</td>\n","      <td>-0.009286</td>\n","      <td>0.034617</td>\n","    </tr>\n","    <tr>\n","      <th>2016-01-05</th>\n","      <td>-0.042014</td>\n","      <td>0.009491</td>\n","      <td>0.018942</td>\n","      <td>-0.085811</td>\n","      <td>0.01795</td>\n","      <td>0.014767</td>\n","    </tr>\n","    <tr>\n","      <th>2016-01-06</th>\n","      <td>-0.064044</td>\n","      <td>0.004135</td>\n","      <td>0.037001</td>\n","      <td>-0.07521</td>\n","      <td>-0.025753</td>\n","      <td>0.030047</td>\n","    </tr>\n","    <tr>\n","      <th>2016-01-07</th>\n","      <td>-0.015872</td>\n","      <td>0.012473</td>\n","      <td>0.010846</td>\n","      <td>-0.020951</td>\n","      <td>0.016587</td>\n","      <td>0.014533</td>\n","    </tr>\n","    <tr>\n","      <th>2016-01-08</th>\n","      <td>-0.033424</td>\n","      <td>-0.020473</td>\n","      <td>0.037395</td>\n","      <td>-0.026949</td>\n","      <td>-0.027099</td>\n","      <td>0.045662</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-19</th>\n","      <td>0.013435</td>\n","      <td>0.01778</td>\n","      <td>0.036433</td>\n","      <td>0.020732</td>\n","      <td>0.011884</td>\n","      <td>0.017231</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-20</th>\n","      <td>0.002356</td>\n","      <td>-0.007312</td>\n","      <td>0.022023</td>\n","      <td>0.016092</td>\n","      <td>-0.012251</td>\n","      <td>0.02604</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-24</th>\n","      <td>0.01556</td>\n","      <td>-0.009736</td>\n","      <td>0.028349</td>\n","      <td>0.027985</td>\n","      <td>-0.003824</td>\n","      <td>0.023588</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-27</th>\n","      <td>0.0072</td>\n","      <td>0.015014</td>\n","      <td>0.022649</td>\n","      <td>0.029679</td>\n","      <td>0.020781</td>\n","      <td>0.010357</td>\n","    </tr>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.017458</td>\n","      <td>0.013462</td>\n","      <td>0.023546</td>\n","      <td>0.031886</td>\n","      <td>0.024248</td>\n","      <td>0.01094</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>787 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-260d91c5-bab9-467a-98a1-0d5f7dc0ee62')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-260d91c5-bab9-467a-98a1-0d5f7dc0ee62 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-260d91c5-bab9-467a-98a1-0d5f7dc0ee62');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":17}],"source":["# 실제 future_window 이후 수익률, 추출값 future_window만큼 이후 수익률 평균 표준편차 순으로 df 형성 함수\n","backtest_df = calculate_returns('2016-01-01', '2019-12-31', nasdaq, train_20df, future_window)\n","backtest_df"]},{"cell_type":"markdown","metadata":{"id":"bV3C_SDTuwfR"},"source":["## performance evaluation"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qeqBl5RlxDNA","outputId":"e8ec09f8-df06-4564-bbed-9ebf7408dd83","executionInfo":{"status":"ok","timestamp":1688633216130,"user_tz":-540,"elapsed":296,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'result_5': {'good_5': 384,\n","  'bad_5': 320,\n","  'soso_5': 29,\n","  'large_std_5': 54,\n","  'false_mean': 0.0006438408470563359,\n","  'false_std': 0.022923733348141316},\n"," 'result_10': {'good_10': 370,\n","  'bad_10': 336,\n","  'soso_10': 73,\n","  'large_std_10': 8,\n","  'false_mean': 0.0013234966902673988,\n","  'false_std': 0.032075589141832665}}"]},"metadata":{},"execution_count":18}],"source":["result = check_result(backtest_df, future_window)\n","result"]},{"cell_type":"markdown","source":["## Backtest return"],"metadata":{"id":"2aFPREGUm1in"}},{"cell_type":"code","source":["future_window=[10]"],"metadata":{"id":"LflvhVmom0QF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["backtest_df = calculate_returns('2020-01-01', '2021-01-01', nasdaq, train_20df, future_window)\n","backtest_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"cXA6LK1-omUY","executionInfo":{"status":"ok","timestamp":1687961611140,"user_tz":-540,"elapsed":107870,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"6ae9285c-f907-495e-f915-7a06b0206287"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           return_10   mean_10    std_10\n","2019-12-31  0.031886  0.010743  0.025915\n","2020-01-03  0.040814  0.015175  0.031971\n","2020-01-07  0.034756 -0.015415  0.038227\n","2020-01-08   0.02993 -0.015062  0.038907\n","2020-01-09  0.012113 -0.019457  0.047943\n","...              ...       ...       ...\n","2020-12-23  0.033738 -0.003788  0.033686\n","2020-12-24  0.018095 -0.003118   0.03424\n","2020-12-29  0.021691  -0.00039  0.024704\n","2020-12-30  0.018853 -0.000936  0.024914\n","2020-12-31  0.008552  0.013321  0.024026\n","\n","[200 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-a73b6c04-71ba-431d-8106-7c31466736e7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_10</th>\n","      <th>mean_10</th>\n","      <th>std_10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2019-12-31</th>\n","      <td>0.031886</td>\n","      <td>0.010743</td>\n","      <td>0.025915</td>\n","    </tr>\n","    <tr>\n","      <th>2020-01-03</th>\n","      <td>0.040814</td>\n","      <td>0.015175</td>\n","      <td>0.031971</td>\n","    </tr>\n","    <tr>\n","      <th>2020-01-07</th>\n","      <td>0.034756</td>\n","      <td>-0.015415</td>\n","      <td>0.038227</td>\n","    </tr>\n","    <tr>\n","      <th>2020-01-08</th>\n","      <td>0.02993</td>\n","      <td>-0.015062</td>\n","      <td>0.038907</td>\n","    </tr>\n","    <tr>\n","      <th>2020-01-09</th>\n","      <td>0.012113</td>\n","      <td>-0.019457</td>\n","      <td>0.047943</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-23</th>\n","      <td>0.033738</td>\n","      <td>-0.003788</td>\n","      <td>0.033686</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>0.018095</td>\n","      <td>-0.003118</td>\n","      <td>0.03424</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>0.021691</td>\n","      <td>-0.00039</td>\n","      <td>0.024704</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>0.018853</td>\n","      <td>-0.000936</td>\n","      <td>0.024914</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>0.008552</td>\n","      <td>0.013321</td>\n","      <td>0.024026</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>200 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a73b6c04-71ba-431d-8106-7c31466736e7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a73b6c04-71ba-431d-8106-7c31466736e7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a73b6c04-71ba-431d-8106-7c31466736e7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["import pandas as pd\n","\n","def backtest_strategy(backtest_df, nasdaq_df, initial_capital):\n","    cash = initial_capital  # 초기 자본 설정\n","    stocks = 0  # 주식 보유량 초기화\n","    portfolio_value = []  # 포트폴리오 가치를 저장할 리스트\n","\n","    # 날짜에 따른 정확한 매칭을 위해 DataFrame의 인덱스를 날짜로 설정\n","    backtest_df.index = pd.to_datetime(backtest_df.index)\n","    nasdaq_df.index = pd.to_datetime(nasdaq_df.index)\n","\n","    for date in backtest_df.index:\n","        # date = row.Index  # 현재 날짜 가져오기\n","        if date in nasdaq_df.index:  # 현재 날짜가 nasdaq 데이터에 있을 경우\n","            price = nasdaq_df.loc[date, 'price']  # 해당 날짜의 가격 가져오기\n","            mean_10 = backtest_df.loc[date, 'mean_10']  # mean_10 값을 가져오기\n","\n","            # mean_10이 0.01 이상일 경우, 자본의 20%를 매수\n","            if mean_10 >= result['result_10']['false_std']:\n","                buy_amount = cash * 0.40\n","                stocks += buy_amount / price\n","                cash -= buy_amount\n","\n","            # mean_10이 0.005 이상일 경우, 자본의 10%를 매수\n","            elif mean_10 >= (result['result_10']['false_std']*0.5):\n","                buy_amount = cash * 0.20\n","                stocks += buy_amount / price\n","                cash -= buy_amount\n","\n","            # mean_10이 -0.005 이하일 경우, 보유 주식의 절반을 매도\n","            elif mean_10 <= -(result['result_10']['false_std']*0.5):\n","                sell_amount = stocks * 0.5\n","                stocks -= sell_amount\n","                cash += sell_amount * price\n","\n","            # mean_10이 -0.01 이하일 경우, 보유 주식 전체를 매도\n","            elif mean_10 <= -(result['result_10']['false_std']):\n","                cash += stocks * price\n","                stocks = 0  # 주식 보유량 초기화\n","\n","            # 포트폴리오 총 가치 (현금 + 주식 가치) 계산 후 저장\n","            total_value = cash + stocks * price\n","            portfolio_value.append(total_value)\n","\n","    # 백테스팅 종료 시점에 보유 중인 주식 전량 매도\n","    if stocks > 0:\n","        cash += stocks * price\n","        stocks = 0\n","\n","    # 최종 자본에 대한 수익률 계산\n","    final_return_rate = (cash - initial_capital) / initial_capital\n","\n","    return final_return_rate, portfolio_value\n","\n","\n"],"metadata":{"id":"Rw6r2dAhYp-O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 함수 사용\n","final_return_rate, portfolio_value = backtest_strategy(backtest_df, nasdaq, initial_capital=100000)\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-rqPVgLadAp","executionInfo":{"status":"ok","timestamp":1687961743219,"user_tz":-540,"elapsed":538,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"5e612c0e-4709-4b0f-e536-d909c09a9c54"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["최종 수익률: 37.40%\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"nQAmZruqalOA"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1VNZqO7UkAsE4JrzWz-CmYFf8n8CjpZQ-","timestamp":1687521763752}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}