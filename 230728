{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"WQtSq-0FpKcf"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","# from yahoo_fin import options\n","import yfinance as yf\n","from datetime import datetime, timedelta\n","from datetime import date\n","from dateutil.parser import parse # 데이트 형식 자동변환\n","from copy import copy\n","from scipy.spatial import distance\n","from dateutil.relativedelta import relativedelta\n","from tqdm import tqdm\n","import time"]},{"cell_type":"markdown","metadata":{"id":"7lFxQQ6xrNHZ"},"source":["## 1. functions"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cwd7z4xwrNeb"},"outputs":[],"source":["# 주가, 거래량 데이터 받는 함수\n","def get_fin_data(ticker, period):\n","    # yahoo finance에서 데이터 불러오기\n","    df = pd.DataFrame(yf.download(tickers=ticker, period=period)[['Adj Close','Volume']])\n","    df.rename(columns = {'Adj Close':'price'},inplace=True)\n","\n","    return df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AuyTQWqHrOCK"},"outputs":[],"source":["# 과거 대비 수익률 데이터 & 미래 수익률 데이터\n","def cal_return(df, window_sizes, future):\n","    df_return =copy(df)\n","    train_col = [] # train data 들어갈 것\n","    test_col = [] # 실제 비교할 data에 들어갈 것\n","\n","    # window 사이즈만큼 이동한 주가 데이터\n","    for window in window_sizes:\n","        df_return[f'p_b{window}'] = df['price'].shift(window)\n","\n","    # 과거 대비 로그 평균 수익률 데이터\n","    for window in window_sizes:\n","        df_return[f'return_b{window}'] = (np.log(df['price']) - np.log(df_return[f'p_b{window}'])) / window\n","        train_col.append(f'return_b{window}')\n","\n","    # 미래만큼 이동한 데이터\n","    for after in future:\n","        df_return[f'p_a{after}'] = df['price'].shift(-after)\n","\n","    # 미래 일반(로그x) 수익률\n","    for after in future:\n","        df_return[f'return_a{after}'] = (df_return[f'p_a{after}']) / (df_return['price']) -1\n","        test_col.append(f'return_a{after}')\n","\n","    train_df = df_return[train_col]\n","    test_df = df_return[test_col]\n","\n","    return train_df, test_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GXD0KryCrORt"},"outputs":[],"source":["# 거래량 z-score 구하기\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_zscore(df, vol_len, scale):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_df[f'vol_mean{window}'] = df['Volume'].rolling(window).mean()\n","        vol_df[f'vol_std{window}'] = df['Volume'].rolling(window).std()\n","        vol_df[f'vol_z{window}'] = (df['Volume'].rolling(vol_len).median() - vol_df[f'vol_mean{window}']) / vol_df[f'vol_std{window}']\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df\n","\n","# 거래량의 스케일된 점수\n","# 최근 N 기간의 거래량대비 최근 k일간의 거래량으로 scale down\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_scaled_zscore(df, scale = [20, 40, 60, 80, 100, 120], std_scale = 240, base_N = 1000):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_mean_scaled = df['Volume'].rolling(window).mean() / df['Volume'].rolling(base_N).mean() # 이 값은 평균 1에서 오실레이트 할 것임.\n","        vol_df[f'vol_z{window}'] = vol_mean_scaled / vol_mean_scaled.rolling(std_scale).std() # 스케일된 vol_mean을 위에서 오실레이트 하는 수준의 std로 나누기\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oe71Pi19ucuO"},"outputs":[],"source":["# 유사도 구하는 방식 L1, L2\n","def calculate_l2_distance(start_value, target_value):\n","    squared_diff = np.power(start_value - target_value, 2)\n","    sum_squared_diff = np.sum(squared_diff)\n","    l2_distance = np.sqrt(sum_squared_diff)\n","    return l2_distance\n","\n","def calculate_l1_distance(start_value, target_value):\n","    abs_diff = np.abs(start_value - target_value)\n","    l1_distance = np.sum(abs_diff)\n","    return l1_distance"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"etPtS1btwQ37"},"outputs":[],"source":["def extract_closest_indices(df, train_df, raw_target_index, future_window, n=30, distance_metric='l1'):\n","    df_index = pd.to_datetime(train_df.index) # train_df의 index를 datatime 형식으로.\n","    distances = {}\n","    #raw_target_index = pd.to_datetime(raw_target_index)\n","\n","    # raw target index를 df에 있는 인덱스로 변환\n","    if raw_target_index not in df_index:\n","        print(f\"your target date {raw_target_index} is not in index\")\n","        return \"no\"\n","    else:\n","        target_index = copy(raw_target_index)#.copy()\n","\n","        target_value = train_df.loc[target_index].values#[0]\n","\n","        # L1 & L2 중 선택한 방법 방식 불러오기\n","        if distance_metric == 'l1':\n","            distance_function = calculate_l1_distance\n","        elif distance_metric == 'l2':\n","            distance_function = calculate_l2_distance\n","        else:\n","            raise ValueError(\"Invalid distance metric. Use 'l1' or 'l2'.\")\n","\n","        # target index와 과거의 index와 거리 계산\n","        for index in train_df.index:\n","            if index != target_index and index < target_index:\n","                distance = distance_function(train_df.loc[index].values, target_value)\n","                distances[index] = distance\n","        # 거리 기준 n 개 추출\n","        closest_indices = sorted(distances, key=distances.get)[:n]\n","        returns = np.zeros((len(closest_indices), len(future_window)))\n","\n","        # 추출된 인덱스의 수익률 계산\n","        for i, index in enumerate(closest_indices):\n","            for j, window in enumerate(future_window):\n","                return_value = (df.at[train_df.index[train_df.index >= index][window], 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","                returns[i, j] = return_value\n","\n","        returns_df = pd.DataFrame(returns, columns=['return_{}'.format(window) for window in future_window])\n","        mean = returns_df.mean()\n","        std = returns_df.std()\n","\n","        results = []\n","        for col in returns_df.columns:\n","            results.extend([mean[col], std[col]])\n","\n","        real_results = []\n","        for window in future_window:\n","            # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","            next_date = train_df.index[train_df.index >= target_index][window]\n","            # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","            real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","            real_results.append(real_return)\n","\n","        return results, real_results"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PlQ7sOwdOP-u"},"outputs":[],"source":["def calculate_returns(start_date, end_date, df, train_df, future_window):\n","    result_columns = []\n","    for window in future_window:\n","        result_columns.extend(['return_{}'.format(window), 'mean_{}'.format(window), 'std_{}'.format(window)])\n","\n","    result_df = pd.DataFrame(columns=result_columns)\n","\n","    df_index = pd.to_datetime(df.index)\n","    start_date = pd.to_datetime(start_date)\n","    end_date = pd.to_datetime(end_date)\n","\n","    if start_date not in df_index:\n","        closest_start_date = df_index[df_index <= start_date][-1]\n","        start_date = df_index[df_index == closest_start_date][0]\n","\n","    if end_date not in df_index:\n","        closest_end_date = df_index[df_index >= end_date][0]\n","        end_date = df_index[df_index == closest_end_date][0]\n","\n","    current_index = start_date\n","\n","    while current_index <= end_date:\n","        if extract_closest_indices(df, train_df, current_index, future_window) == \"no\":\n","            pass\n","        else:\n","            results, real_results = extract_closest_indices(df, train_df, current_index, future_window)\n","            for i, window in enumerate(future_window):\n","                result_df.loc[current_index, 'return_{}'.format(window)] = real_results[i]\n","                result_df.loc[current_index, 'mean_{}'.format(window)] = results[i*2]\n","                result_df.loc[current_index, 'std_{}'.format(window)] = results[i*2-1]\n","\n","            current_index = df_index[df_index >= current_index][0]\n","        current_index += pd.DateOffset(days=1)\n","\n","#     result_df = result_df[result_df.index.isin(df.index)]\n","\n","    return result_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FlWmdft3JsED"},"outputs":[],"source":["# 실제 수익률이랑 같은 방향인지 체크\n","def check_sign(x, y):\n","    if (x * y) > 0:\n","        return True\n","    else:\n","        return False"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ln3Hp9qedUoL"},"outputs":[],"source":["# 실제 미래 수익률값과 비교해봤을 때 얼마나 잘 맞췄는지 확인\n","def check_result(return_df, future_window):\n","    result_dict = {}\n","\n","    for window in future_window:\n","        result_dict['result_{}'.format(window)] = {\n","            'soso_{}'.format(window): 0,\n","            'large_std_{}'.format(window): 0,\n","            'pos_true_{}'.format(window): 0,\n","            'pos_false_{}'.format(window):0,\n","            'neg_true_{}'.format(window):0,\n","            'neg_false_{}'.format(window):0,\n","            'error_mean'.format(window):0,\n","            'error_std'.format(window):0\n","            }\n","\n","\n","    for window in future_window:\n","        # bad, real_return > mean_return\n","        # plus_error = []\n","        # bad, real_return < mean_return\n","        # minus_error = []\n","        # total bad\n","        total_error = []\n","        for i in range(len(return_df)):\n","            real_return = return_df['return_{}'.format(window)][i]\n","            mean_return = return_df['mean_{}'.format(window)][i]\n","            std = return_df['std_{}'.format(window)][i]\n","            # mean - std: minus_std, mean + std: plus_std\n","            minus_std = mean_return - std\n","            plus_std = mean_return + std\n","\n","            # 표준편차가 클 때(5% 기준)\n","            if std >= 0.05:\n","                result_dict['result_{}'.format(window)]['large_std_{}'.format(window)] += 1\n","\n","            # positive/negative: 매수/매도, true/false:맞췄을 때/틀렸을 때\n","            # 방향성 같은지 체크: true일 때\n","            elif check_sign(real_return, mean_return):\n","                # 방향성 같고, range 안에 있을 때\n","                if (real_return > minus_std) and (real_return < plus_std):\n","                    # 매수일 때\n","                    if mean_return > 0 :\n","                      result_dict['result_{}'.format(window)]['pos_true_{}'.format(window)] += 1\n","                    # 매도일 때\n","                    else:\n","                      result_dict['result_{}'.format(window)]['neg_true_{}'.format(window)] += 1\n","                # 방향성 같은데, range 밖에 있을 때\n","                else:\n","                    result_dict['result_{}'.format(window)]['soso_{}'.format(window)] += 1\n","            # 방향성 틀렸을 때\n","            else:\n","              # 매수 신호인데 틀렸을 때\n","              if mean_return > 0 :\n","                result_dict['result_{}'.format(window)]['pos_false_{}'.format(window)] += 1\n","              # 매도일 때\n","              else:\n","                result_dict['result_{}'.format(window)]['neg_false_{}'.format(window)] += 1\n","\n","            total_error.append(real_return - mean_return)\n","\n","        # result_dict['result_{}'.format(window)]['false_positive_len'.format(window)]=len(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_mean'.format(window)]=np.mean(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_std'.format(window)]=np.std(plus_error)\n","        result_dict['result_{}'.format(window)]['error_mean'.format(window)]=np.mean(total_error)\n","        result_dict['result_{}'.format(window)]['error_std'.format(window)]=np.std(total_error)\n","\n","    return result_dict"]},{"cell_type":"markdown","metadata":{"id":"WNxS6hM4qXkK"},"source":["## 2. data preprocessing"]},{"cell_type":"markdown","metadata":{"id":"NFNtU71dt9zo"},"source":["### price data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"executionInfo":{"elapsed":626,"status":"ok","timestamp":1690570986135,"user":{"displayName":"김지민학부생","userId":"01807737036811099239"},"user_tz":-540},"id":"qkQI7n_lr6bM","outputId":"d6448309-220e-4aca-abd0-a565238de77e"},"outputs":[{"output_type":"stream","name":"stdout","text":["\r[*********************100%***********************]  1 of 1 completed\n"]},{"output_type":"execute_result","data":{"text/plain":["                   price      Volume\n","Date                                \n","1971-02-05    100.000000           0\n","1971-02-08    100.839996           0\n","1971-02-09    100.760002           0\n","1971-02-10    100.690002           0\n","1971-02-11    101.449997           0\n","...                  ...         ...\n","2023-07-24  14058.870117  4083070000\n","2023-07-25  14144.559570  3812470000\n","2023-07-26  14127.280273  4322000000\n","2023-07-27  14050.110352  5115840000\n","2023-07-28  14316.030273  2956060000\n","\n","[13234 rows x 2 columns]"],"text/html":["\n","\n","  <div id=\"df-4c524297-e37e-4801-9a19-6998cb939134\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>Volume</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>100.000000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>100.839996</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>100.760002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>100.690002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>101.449997</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>14058.870117</td>\n","      <td>4083070000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>14144.559570</td>\n","      <td>3812470000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>14127.280273</td>\n","      <td>4322000000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>14050.110352</td>\n","      <td>5115840000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>14316.030273</td>\n","      <td>2956060000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13234 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c524297-e37e-4801-9a19-6998cb939134')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-8651aa05-3388-4964-a12d-a6cf09903250\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8651aa05-3388-4964-a12d-a6cf09903250')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-8651aa05-3388-4964-a12d-a6cf09903250 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4c524297-e37e-4801-9a19-6998cb939134 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4c524297-e37e-4801-9a19-6998cb939134');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":10}],"source":["# download data\n","ticker = \"^IXIC\"\n","period = \"max\" # period: max, 1y, 5y etc.\n","\n","nasdaq = get_fin_data(ticker, period)\n","nasdaq"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6XbrqKrOozfI"},"outputs":[],"source":["nasdaq.index = pd.to_datetime(nasdaq.index)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Q3CfeVUr1Tc"},"outputs":[],"source":["# parameters\n","today = nasdaq.index[-1]#.date()\n","year = today - relativedelta(years=20)\n","window_sizes = [20, 40, 60, 80, 100]\n","future_window = [5, 10] # future 이후 수익률\n","sort_num = 30 # 유사도 sorting 할 길이"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":892},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1690570986138,"user":{"displayName":"김지민학부생","userId":"01807737036811099239"},"user_tz":-540},"id":"pLH1sRDit1z1","outputId":"ba711250-0a5b-4a8c-bdcd-0d9984b6d527"},"outputs":[{"output_type":"display_data","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100\n","Date                                                                   \n","1971-02-05         NaN         NaN         NaN         NaN          NaN\n","1971-02-08         NaN         NaN         NaN         NaN          NaN\n","1971-02-09         NaN         NaN         NaN         NaN          NaN\n","1971-02-10         NaN         NaN         NaN         NaN          NaN\n","1971-02-11         NaN         NaN         NaN         NaN          NaN\n","...                ...         ...         ...         ...          ...\n","2023-07-24    0.002056    0.002970    0.002843    0.002279     0.002048\n","2023-07-25    0.002944    0.002697    0.002544    0.002132     0.002175\n","2023-07-26    0.002065    0.002126    0.002408    0.002026     0.002090\n","2023-07-27    0.001658    0.001909    0.002336    0.001742     0.001840\n","2023-07-28    0.002597    0.002536    0.002830    0.002010     0.002039\n","\n","[13234 rows x 5 columns]"],"text/html":["\n","\n","  <div id=\"df-e981391d-1995-4816-9212-6e1e8a55c1a8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>0.002056</td>\n","      <td>0.002970</td>\n","      <td>0.002843</td>\n","      <td>0.002279</td>\n","      <td>0.002048</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>0.002944</td>\n","      <td>0.002697</td>\n","      <td>0.002544</td>\n","      <td>0.002132</td>\n","      <td>0.002175</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>0.002065</td>\n","      <td>0.002126</td>\n","      <td>0.002408</td>\n","      <td>0.002026</td>\n","      <td>0.002090</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>0.001658</td>\n","      <td>0.001909</td>\n","      <td>0.002336</td>\n","      <td>0.001742</td>\n","      <td>0.001840</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>0.002597</td>\n","      <td>0.002536</td>\n","      <td>0.002830</td>\n","      <td>0.002010</td>\n","      <td>0.002039</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13234 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e981391d-1995-4816-9212-6e1e8a55c1a8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-b4ee2ebd-7c5d-4d8b-8277-cb310f23525e\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b4ee2ebd-7c5d-4d8b-8277-cb310f23525e')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-b4ee2ebd-7c5d-4d8b-8277-cb310f23525e button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e981391d-1995-4816-9212-6e1e8a55c1a8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e981391d-1995-4816-9212-6e1e8a55c1a8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["            return_a5  return_a10\n","Date                             \n","1971-02-05   0.020500   -0.003200\n","1971-02-08   0.013388   -0.011107\n","1971-02-09   0.009726   -0.001191\n","1971-02-10   0.007250    0.005363\n","1971-02-11  -0.007393   -0.001084\n","...               ...         ...\n","2023-07-24        NaN         NaN\n","2023-07-25        NaN         NaN\n","2023-07-26        NaN         NaN\n","2023-07-27        NaN         NaN\n","2023-07-28        NaN         NaN\n","\n","[13234 rows x 2 columns]"],"text/html":["\n","\n","  <div id=\"df-de92299b-e22d-4600-808b-e3f5303ebbb9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_a5</th>\n","      <th>return_a10</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>0.020500</td>\n","      <td>-0.003200</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>0.013388</td>\n","      <td>-0.011107</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>0.009726</td>\n","      <td>-0.001191</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>0.007250</td>\n","      <td>0.005363</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>-0.007393</td>\n","      <td>-0.001084</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13234 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de92299b-e22d-4600-808b-e3f5303ebbb9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-8cfc6d75-ddfa-4f90-8768-39b151dfb3b9\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8cfc6d75-ddfa-4f90-8768-39b151dfb3b9')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-8cfc6d75-ddfa-4f90-8768-39b151dfb3b9 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-de92299b-e22d-4600-808b-e3f5303ebbb9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-de92299b-e22d-4600-808b-e3f5303ebbb9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":13}],"source":["# window size만큼 과거 대비 수익률, future 만큼 미래 수익률\n","train_df, test_df = cal_return(nasdaq, window_sizes, future_window)\n","\n","display(train_df)\n","test_df"]},{"cell_type":"markdown","metadata":{"id":"UaH5lsuMt2Yi"},"source":["### volume data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1690570986139,"user":{"displayName":"김지민학부생","userId":"01807737036811099239"},"user_tz":-540},"id":"00FzndsWt2kS","outputId":"840d296e-0490-47e3-e03c-3dc63ceea21c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            vol_z100  vol_z200\n","Date                          \n","1971-02-05       NaN       NaN\n","1971-02-08       NaN       NaN\n","1971-02-09       NaN       NaN\n","1971-02-10       NaN       NaN\n","1971-02-11       NaN       NaN\n","...              ...       ...\n","2023-07-24  0.225031  0.207032\n","2023-07-25  0.237091  0.208361\n","2023-07-26 -0.776127 -0.825854\n","2023-07-27 -0.776270 -0.829279\n","2023-07-28 -1.027213 -1.120731\n","\n","[13234 rows x 2 columns]"],"text/html":["\n","\n","  <div id=\"df-4d732054-2961-4587-98d6-9f2afae07314\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>0.225031</td>\n","      <td>0.207032</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>0.237091</td>\n","      <td>0.208361</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>-0.776127</td>\n","      <td>-0.825854</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>-0.776270</td>\n","      <td>-0.829279</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>-1.027213</td>\n","      <td>-1.120731</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13234 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d732054-2961-4587-98d6-9f2afae07314')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-ad66c4f9-9961-40e6-97e5-c7120a290c5a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ad66c4f9-9961-40e6-97e5-c7120a290c5a')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-ad66c4f9-9961-40e6-97e5-c7120a290c5a button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4d732054-2961-4587-98d6-9f2afae07314 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4d732054-2961-4587-98d6-9f2afae07314');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":14}],"source":["scale = [100, 200] # 이동평균 날짜 길이\n","vol_len = 5 # z-score 분자 데이터 이동평균할 날짜 길이\n","# scale 이동평균 대비 거래량 z-score 구하기\n","nasdaq_vol_df = vol_zscore(nasdaq, vol_len, scale)\n","nasdaq_vol_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1690570986139,"user":{"displayName":"김지민학부생","userId":"01807737036811099239"},"user_tz":-540},"id":"E7WkCw2UuScy","outputId":"d660cc90-c03d-4c5a-88de-8db6cb68b10e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","1971-02-05         NaN         NaN         NaN         NaN          NaN   \n","1971-02-08         NaN         NaN         NaN         NaN          NaN   \n","1971-02-09         NaN         NaN         NaN         NaN          NaN   \n","1971-02-10         NaN         NaN         NaN         NaN          NaN   \n","1971-02-11         NaN         NaN         NaN         NaN          NaN   \n","...                ...         ...         ...         ...          ...   \n","2023-07-24    0.002056    0.002970    0.002843    0.002279     0.002048   \n","2023-07-25    0.002944    0.002697    0.002544    0.002132     0.002175   \n","2023-07-26    0.002065    0.002126    0.002408    0.002026     0.002090   \n","2023-07-27    0.001658    0.001909    0.002336    0.001742     0.001840   \n","2023-07-28    0.002597    0.002536    0.002830    0.002010     0.002039   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","1971-02-05       NaN       NaN  \n","1971-02-08       NaN       NaN  \n","1971-02-09       NaN       NaN  \n","1971-02-10       NaN       NaN  \n","1971-02-11       NaN       NaN  \n","...              ...       ...  \n","2023-07-24  0.225031  0.207032  \n","2023-07-25  0.237091  0.208361  \n","2023-07-26 -0.776127 -0.825854  \n","2023-07-27 -0.776270 -0.829279  \n","2023-07-28 -1.027213 -1.120731  \n","\n","[13234 rows x 7 columns]"],"text/html":["\n","\n","  <div id=\"df-c1343d9e-2462-4aea-8c1e-b60bc24e1216\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>0.002056</td>\n","      <td>0.002970</td>\n","      <td>0.002843</td>\n","      <td>0.002279</td>\n","      <td>0.002048</td>\n","      <td>0.225031</td>\n","      <td>0.207032</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>0.002944</td>\n","      <td>0.002697</td>\n","      <td>0.002544</td>\n","      <td>0.002132</td>\n","      <td>0.002175</td>\n","      <td>0.237091</td>\n","      <td>0.208361</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>0.002065</td>\n","      <td>0.002126</td>\n","      <td>0.002408</td>\n","      <td>0.002026</td>\n","      <td>0.002090</td>\n","      <td>-0.776127</td>\n","      <td>-0.825854</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>0.001658</td>\n","      <td>0.001909</td>\n","      <td>0.002336</td>\n","      <td>0.001742</td>\n","      <td>0.001840</td>\n","      <td>-0.776270</td>\n","      <td>-0.829279</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>0.002597</td>\n","      <td>0.002536</td>\n","      <td>0.002830</td>\n","      <td>0.002010</td>\n","      <td>0.002039</td>\n","      <td>-1.027213</td>\n","      <td>-1.120731</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13234 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1343d9e-2462-4aea-8c1e-b60bc24e1216')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-816ce464-8615-4012-a4e0-9e0194b67392\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-816ce464-8615-4012-a4e0-9e0194b67392')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-816ce464-8615-4012-a4e0-9e0194b67392 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c1343d9e-2462-4aea-8c1e-b60bc24e1216 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c1343d9e-2462-4aea-8c1e-b60bc24e1216');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":15}],"source":["# train_df에 거래량 feature도 추가\n","train_df = pd.merge(train_df, nasdaq_vol_df, left_index=True, right_index=True)\n","train_df"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1690570986140,"user":{"displayName":"김지민학부생","userId":"01807737036811099239"},"user_tz":-540},"id":"AamEH0H0uTN3","outputId":"858636d2-ce04-436d-ae4d-f64ffd74220f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","2003-07-28    0.003277    0.002094    0.002737    0.002714     0.002778   \n","2003-07-29    0.003238    0.002118    0.002359    0.002686     0.002843   \n","2003-07-30    0.002404    0.001766    0.002245    0.002728     0.002764   \n","2003-07-31    0.001649    0.001490    0.002165    0.002776     0.003054   \n","2003-08-01    0.001544    0.001036    0.002164    0.002695     0.002996   \n","...                ...         ...         ...         ...          ...   \n","2023-07-24    0.002056    0.002970    0.002843    0.002279     0.002048   \n","2023-07-25    0.002944    0.002697    0.002544    0.002132     0.002175   \n","2023-07-26    0.002065    0.002126    0.002408    0.002026     0.002090   \n","2023-07-27    0.001658    0.001909    0.002336    0.001742     0.001840   \n","2023-07-28    0.002597    0.002536    0.002830    0.002010     0.002039   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","2003-07-28  0.130831  0.427506  \n","2003-07-29 -0.027034  0.290725  \n","2003-07-30 -0.396514 -0.054502  \n","2003-07-31 -0.427258 -0.064591  \n","2003-08-01 -0.608172 -0.216177  \n","...              ...       ...  \n","2023-07-24  0.225031  0.207032  \n","2023-07-25  0.237091  0.208361  \n","2023-07-26 -0.776127 -0.825854  \n","2023-07-27 -0.776270 -0.829279  \n","2023-07-28 -1.027213 -1.120731  \n","\n","[5036 rows x 7 columns]"],"text/html":["\n","\n","  <div id=\"df-ba0a8470-4087-4da2-b3c2-4279f6d99f66\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2003-07-28</th>\n","      <td>0.003277</td>\n","      <td>0.002094</td>\n","      <td>0.002737</td>\n","      <td>0.002714</td>\n","      <td>0.002778</td>\n","      <td>0.130831</td>\n","      <td>0.427506</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-29</th>\n","      <td>0.003238</td>\n","      <td>0.002118</td>\n","      <td>0.002359</td>\n","      <td>0.002686</td>\n","      <td>0.002843</td>\n","      <td>-0.027034</td>\n","      <td>0.290725</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-30</th>\n","      <td>0.002404</td>\n","      <td>0.001766</td>\n","      <td>0.002245</td>\n","      <td>0.002728</td>\n","      <td>0.002764</td>\n","      <td>-0.396514</td>\n","      <td>-0.054502</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-31</th>\n","      <td>0.001649</td>\n","      <td>0.001490</td>\n","      <td>0.002165</td>\n","      <td>0.002776</td>\n","      <td>0.003054</td>\n","      <td>-0.427258</td>\n","      <td>-0.064591</td>\n","    </tr>\n","    <tr>\n","      <th>2003-08-01</th>\n","      <td>0.001544</td>\n","      <td>0.001036</td>\n","      <td>0.002164</td>\n","      <td>0.002695</td>\n","      <td>0.002996</td>\n","      <td>-0.608172</td>\n","      <td>-0.216177</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-24</th>\n","      <td>0.002056</td>\n","      <td>0.002970</td>\n","      <td>0.002843</td>\n","      <td>0.002279</td>\n","      <td>0.002048</td>\n","      <td>0.225031</td>\n","      <td>0.207032</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-25</th>\n","      <td>0.002944</td>\n","      <td>0.002697</td>\n","      <td>0.002544</td>\n","      <td>0.002132</td>\n","      <td>0.002175</td>\n","      <td>0.237091</td>\n","      <td>0.208361</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-26</th>\n","      <td>0.002065</td>\n","      <td>0.002126</td>\n","      <td>0.002408</td>\n","      <td>0.002026</td>\n","      <td>0.002090</td>\n","      <td>-0.776127</td>\n","      <td>-0.825854</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-27</th>\n","      <td>0.001658</td>\n","      <td>0.001909</td>\n","      <td>0.002336</td>\n","      <td>0.001742</td>\n","      <td>0.001840</td>\n","      <td>-0.776270</td>\n","      <td>-0.829279</td>\n","    </tr>\n","    <tr>\n","      <th>2023-07-28</th>\n","      <td>0.002597</td>\n","      <td>0.002536</td>\n","      <td>0.002830</td>\n","      <td>0.002010</td>\n","      <td>0.002039</td>\n","      <td>-1.027213</td>\n","      <td>-1.120731</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5036 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba0a8470-4087-4da2-b3c2-4279f6d99f66')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-95ffc130-e8cb-4385-bee7-c688e8e107a8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-95ffc130-e8cb-4385-bee7-c688e8e107a8')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-95ffc130-e8cb-4385-bee7-c688e8e107a8 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ba0a8470-4087-4da2-b3c2-4279f6d99f66 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ba0a8470-4087-4da2-b3c2-4279f6d99f66');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":16}],"source":["# 최근 20년 데이터만 추출\n","train_20df = train_df[year:]\n","\n","train_20df"]},{"cell_type":"markdown","metadata":{"id":"KlClwKxNuTXR"},"source":["## backtest"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xUac4_NGuv08","outputId":"52793613-f3a8-40ed-f02c-3999074973c0"},"outputs":[{"output_type":"stream","name":"stdout","text":["your target date 2015-01-01 00:00:00 is not in index\n","your target date 2015-01-03 00:00:00 is not in index\n","your target date 2015-01-04 00:00:00 is not in index\n","your target date 2015-01-10 00:00:00 is not in index\n","your target date 2015-01-11 00:00:00 is not in index\n","your target date 2015-01-17 00:00:00 is not in index\n","your target date 2015-01-18 00:00:00 is not in index\n","your target date 2015-01-19 00:00:00 is not in index\n","your target date 2015-01-24 00:00:00 is not in index\n","your target date 2015-01-25 00:00:00 is not in index\n","your target date 2015-01-31 00:00:00 is not in index\n","your target date 2015-02-01 00:00:00 is not in index\n","your target date 2015-02-07 00:00:00 is not in index\n","your target date 2015-02-08 00:00:00 is not in index\n","your target date 2015-02-14 00:00:00 is not in index\n","your target date 2015-02-15 00:00:00 is not in index\n","your target date 2015-02-16 00:00:00 is not in index\n","your target date 2015-02-21 00:00:00 is not in index\n","your target date 2015-02-22 00:00:00 is not in index\n","your target date 2015-02-28 00:00:00 is not in index\n","your target date 2015-03-01 00:00:00 is not in index\n","your target date 2015-03-07 00:00:00 is not in index\n","your target date 2015-03-08 00:00:00 is not in index\n","your target date 2015-03-14 00:00:00 is not in index\n","your target date 2015-03-15 00:00:00 is not in index\n","your target date 2015-03-21 00:00:00 is not in index\n","your target date 2015-03-22 00:00:00 is not in index\n","your target date 2015-03-28 00:00:00 is not in index\n","your target date 2015-03-29 00:00:00 is not in index\n","your target date 2015-04-03 00:00:00 is not in index\n","your target date 2015-04-04 00:00:00 is not in index\n","your target date 2015-04-05 00:00:00 is not in index\n","your target date 2015-04-11 00:00:00 is not in index\n","your target date 2015-04-12 00:00:00 is not in index\n","your target date 2015-04-18 00:00:00 is not in index\n","your target date 2015-04-19 00:00:00 is not in index\n","your target date 2015-04-25 00:00:00 is not in index\n","your target date 2015-04-26 00:00:00 is not in index\n","your target date 2015-05-02 00:00:00 is not in index\n","your target date 2015-05-03 00:00:00 is not in index\n","your target date 2015-05-09 00:00:00 is not in index\n","your target date 2015-05-10 00:00:00 is not in index\n","your target date 2015-05-16 00:00:00 is not in index\n","your target date 2015-05-17 00:00:00 is not in index\n","your target date 2015-05-23 00:00:00 is not in index\n","your target date 2015-05-24 00:00:00 is not in index\n","your target date 2015-05-25 00:00:00 is not in index\n","your target date 2015-05-30 00:00:00 is not in index\n","your target date 2015-05-31 00:00:00 is not in index\n","your target date 2015-06-06 00:00:00 is not in index\n","your target date 2015-06-07 00:00:00 is not in index\n","your target date 2015-06-13 00:00:00 is not in index\n","your target date 2015-06-14 00:00:00 is not in index\n","your target date 2015-06-20 00:00:00 is not in index\n","your target date 2015-06-21 00:00:00 is not in index\n","your target date 2015-06-27 00:00:00 is not in index\n","your target date 2015-06-28 00:00:00 is not in index\n","your target date 2015-07-03 00:00:00 is not in index\n","your target date 2015-07-04 00:00:00 is not in index\n","your target date 2015-07-05 00:00:00 is not in index\n","your target date 2015-07-11 00:00:00 is not in index\n","your target date 2015-07-12 00:00:00 is not in index\n","your target date 2015-07-18 00:00:00 is not in index\n","your target date 2015-07-19 00:00:00 is not in index\n","your target date 2015-07-25 00:00:00 is not in index\n","your target date 2015-07-26 00:00:00 is not in index\n","your target date 2015-08-01 00:00:00 is not in index\n","your target date 2015-08-02 00:00:00 is not in index\n","your target date 2015-08-08 00:00:00 is not in index\n","your target date 2015-08-09 00:00:00 is not in index\n","your target date 2015-08-15 00:00:00 is not in index\n","your target date 2015-08-16 00:00:00 is not in index\n","your target date 2015-08-22 00:00:00 is not in index\n","your target date 2015-08-23 00:00:00 is not in index\n","your target date 2015-08-29 00:00:00 is not in index\n","your target date 2015-08-30 00:00:00 is not in index\n","your target date 2015-09-05 00:00:00 is not in index\n","your target date 2015-09-06 00:00:00 is not in index\n","your target date 2015-09-07 00:00:00 is not in index\n","your target date 2015-09-12 00:00:00 is not in index\n","your target date 2015-09-13 00:00:00 is not in index\n","your target date 2015-09-19 00:00:00 is not in index\n","your target date 2015-09-20 00:00:00 is not in index\n","your target date 2015-09-26 00:00:00 is not in index\n","your target date 2015-09-27 00:00:00 is not in index\n","your target date 2015-10-03 00:00:00 is not in index\n","your target date 2015-10-04 00:00:00 is not in index\n","your target date 2015-10-10 00:00:00 is not in index\n","your target date 2015-10-11 00:00:00 is not in index\n","your target date 2015-10-17 00:00:00 is not in index\n","your target date 2015-10-18 00:00:00 is not in index\n","your target date 2015-10-24 00:00:00 is not in index\n","your target date 2015-10-25 00:00:00 is not in index\n","your target date 2015-10-31 00:00:00 is not in index\n","your target date 2015-11-01 00:00:00 is not in index\n","your target date 2015-11-07 00:00:00 is not in index\n","your target date 2015-11-08 00:00:00 is not in index\n","your target date 2015-11-14 00:00:00 is not in index\n","your target date 2015-11-15 00:00:00 is not in index\n","your target date 2015-11-21 00:00:00 is not in index\n","your target date 2015-11-22 00:00:00 is not in index\n","your target date 2015-11-26 00:00:00 is not in index\n","your target date 2015-11-28 00:00:00 is not in index\n","your target date 2015-11-29 00:00:00 is not in index\n","your target date 2015-12-05 00:00:00 is not in index\n","your target date 2015-12-06 00:00:00 is not in index\n","your target date 2015-12-12 00:00:00 is not in index\n","your target date 2015-12-13 00:00:00 is not in index\n","your target date 2015-12-19 00:00:00 is not in index\n","your target date 2015-12-20 00:00:00 is not in index\n","your target date 2015-12-25 00:00:00 is not in index\n","your target date 2015-12-26 00:00:00 is not in index\n","your target date 2015-12-27 00:00:00 is not in index\n","your target date 2016-01-01 00:00:00 is not in index\n","your target date 2016-01-02 00:00:00 is not in index\n","your target date 2016-01-03 00:00:00 is not in index\n","your target date 2016-01-09 00:00:00 is not in index\n","your target date 2016-01-10 00:00:00 is not in index\n","your target date 2016-01-16 00:00:00 is not in index\n","your target date 2016-01-17 00:00:00 is not in index\n","your target date 2016-01-18 00:00:00 is not in index\n","your target date 2016-01-23 00:00:00 is not in index\n","your target date 2016-01-24 00:00:00 is not in index\n","your target date 2016-01-30 00:00:00 is not in index\n","your target date 2016-01-31 00:00:00 is not in index\n","your target date 2016-02-06 00:00:00 is not in index\n","your target date 2016-02-07 00:00:00 is not in index\n","your target date 2016-02-13 00:00:00 is not in index\n","your target date 2016-02-14 00:00:00 is not in index\n","your target date 2016-02-15 00:00:00 is not in index\n","your target date 2016-02-20 00:00:00 is not in index\n","your target date 2016-02-21 00:00:00 is not in index\n","your target date 2016-02-27 00:00:00 is not in index\n","your target date 2016-02-28 00:00:00 is not in index\n","your target date 2016-03-05 00:00:00 is not in index\n","your target date 2016-03-06 00:00:00 is not in index\n","your target date 2016-03-12 00:00:00 is not in index\n","your target date 2016-03-13 00:00:00 is not in index\n","your target date 2016-03-19 00:00:00 is not in index\n","your target date 2016-03-20 00:00:00 is not in index\n","your target date 2016-03-25 00:00:00 is not in index\n","your target date 2016-03-26 00:00:00 is not in index\n","your target date 2016-03-27 00:00:00 is not in index\n","your target date 2016-04-02 00:00:00 is not in index\n","your target date 2016-04-03 00:00:00 is not in index\n","your target date 2016-04-09 00:00:00 is not in index\n","your target date 2016-04-10 00:00:00 is not in index\n","your target date 2016-04-16 00:00:00 is not in index\n","your target date 2016-04-17 00:00:00 is not in index\n","your target date 2016-04-23 00:00:00 is not in index\n","your target date 2016-04-24 00:00:00 is not in index\n","your target date 2016-04-30 00:00:00 is not in index\n","your target date 2016-05-01 00:00:00 is not in index\n","your target date 2016-05-07 00:00:00 is not in index\n","your target date 2016-05-08 00:00:00 is not in index\n","your target date 2016-05-14 00:00:00 is not in index\n","your target date 2016-05-15 00:00:00 is not in index\n","your target date 2016-05-21 00:00:00 is not in index\n","your target date 2016-05-22 00:00:00 is not in index\n","your target date 2016-05-28 00:00:00 is not in index\n","your target date 2016-05-29 00:00:00 is not in index\n","your target date 2016-05-30 00:00:00 is not in index\n","your target date 2016-06-04 00:00:00 is not in index\n","your target date 2016-06-05 00:00:00 is not in index\n","your target date 2016-06-11 00:00:00 is not in index\n","your target date 2016-06-12 00:00:00 is not in index\n","your target date 2016-06-18 00:00:00 is not in index\n","your target date 2016-06-19 00:00:00 is not in index\n","your target date 2016-06-25 00:00:00 is not in index\n","your target date 2016-06-26 00:00:00 is not in index\n","your target date 2016-07-02 00:00:00 is not in index\n","your target date 2016-07-03 00:00:00 is not in index\n","your target date 2016-07-04 00:00:00 is not in index\n","your target date 2016-07-09 00:00:00 is not in index\n","your target date 2016-07-10 00:00:00 is not in index\n","your target date 2016-07-16 00:00:00 is not in index\n","your target date 2016-07-17 00:00:00 is not in index\n","your target date 2016-07-23 00:00:00 is not in index\n","your target date 2016-07-24 00:00:00 is not in index\n","your target date 2016-07-30 00:00:00 is not in index\n","your target date 2016-07-31 00:00:00 is not in index\n","your target date 2016-08-06 00:00:00 is not in index\n","your target date 2016-08-07 00:00:00 is not in index\n","your target date 2016-08-13 00:00:00 is not in index\n","your target date 2016-08-14 00:00:00 is not in index\n","your target date 2016-08-20 00:00:00 is not in index\n","your target date 2016-08-21 00:00:00 is not in index\n","your target date 2016-08-27 00:00:00 is not in index\n","your target date 2016-08-28 00:00:00 is not in index\n","your target date 2016-09-03 00:00:00 is not in index\n","your target date 2016-09-04 00:00:00 is not in index\n","your target date 2016-09-05 00:00:00 is not in index\n","your target date 2016-09-10 00:00:00 is not in index\n","your target date 2016-09-11 00:00:00 is not in index\n","your target date 2016-09-17 00:00:00 is not in index\n","your target date 2016-09-18 00:00:00 is not in index\n","your target date 2016-09-24 00:00:00 is not in index\n","your target date 2016-09-25 00:00:00 is not in index\n","your target date 2016-10-01 00:00:00 is not in index\n","your target date 2016-10-02 00:00:00 is not in index\n","your target date 2016-10-08 00:00:00 is not in index\n","your target date 2016-10-09 00:00:00 is not in index\n","your target date 2016-10-15 00:00:00 is not in index\n","your target date 2016-10-16 00:00:00 is not in index\n","your target date 2016-10-22 00:00:00 is not in index\n","your target date 2016-10-23 00:00:00 is not in index\n","your target date 2016-10-29 00:00:00 is not in index\n","your target date 2016-10-30 00:00:00 is not in index\n","your target date 2016-11-05 00:00:00 is not in index\n","your target date 2016-11-06 00:00:00 is not in index\n","your target date 2016-11-12 00:00:00 is not in index\n","your target date 2016-11-13 00:00:00 is not in index\n","your target date 2016-11-19 00:00:00 is not in index\n","your target date 2016-11-20 00:00:00 is not in index\n","your target date 2016-11-24 00:00:00 is not in index\n","your target date 2016-11-26 00:00:00 is not in index\n","your target date 2016-11-27 00:00:00 is not in index\n","your target date 2016-12-03 00:00:00 is not in index\n","your target date 2016-12-04 00:00:00 is not in index\n","your target date 2016-12-10 00:00:00 is not in index\n","your target date 2016-12-11 00:00:00 is not in index\n","your target date 2016-12-17 00:00:00 is not in index\n","your target date 2016-12-18 00:00:00 is not in index\n","your target date 2016-12-24 00:00:00 is not in index\n","your target date 2016-12-25 00:00:00 is not in index\n","your target date 2016-12-26 00:00:00 is not in index\n","your target date 2016-12-31 00:00:00 is not in index\n","your target date 2017-01-01 00:00:00 is not in index\n","your target date 2017-01-02 00:00:00 is not in index\n","your target date 2017-01-07 00:00:00 is not in index\n","your target date 2017-01-08 00:00:00 is not in index\n","your target date 2017-01-14 00:00:00 is not in index\n","your target date 2017-01-15 00:00:00 is not in index\n","your target date 2017-01-16 00:00:00 is not in index\n","your target date 2017-01-21 00:00:00 is not in index\n","your target date 2017-01-22 00:00:00 is not in index\n","your target date 2017-01-28 00:00:00 is not in index\n","your target date 2017-01-29 00:00:00 is not in index\n","your target date 2017-02-04 00:00:00 is not in index\n","your target date 2017-02-05 00:00:00 is not in index\n","your target date 2017-02-11 00:00:00 is not in index\n","your target date 2017-02-12 00:00:00 is not in index\n","your target date 2017-02-18 00:00:00 is not in index\n","your target date 2017-02-19 00:00:00 is not in index\n","your target date 2017-02-20 00:00:00 is not in index\n","your target date 2017-02-25 00:00:00 is not in index\n","your target date 2017-02-26 00:00:00 is not in index\n","your target date 2017-03-04 00:00:00 is not in index\n","your target date 2017-03-05 00:00:00 is not in index\n","your target date 2017-03-11 00:00:00 is not in index\n","your target date 2017-03-12 00:00:00 is not in index\n","your target date 2017-03-18 00:00:00 is not in index\n","your target date 2017-03-19 00:00:00 is not in index\n","your target date 2017-03-25 00:00:00 is not in index\n","your target date 2017-03-26 00:00:00 is not in index\n","your target date 2017-04-01 00:00:00 is not in index\n","your target date 2017-04-02 00:00:00 is not in index\n","your target date 2017-04-08 00:00:00 is not in index\n","your target date 2017-04-09 00:00:00 is not in index\n","your target date 2017-04-14 00:00:00 is not in index\n","your target date 2017-04-15 00:00:00 is not in index\n","your target date 2017-04-16 00:00:00 is not in index\n","your target date 2017-04-22 00:00:00 is not in index\n","your target date 2017-04-23 00:00:00 is not in index\n","your target date 2017-04-29 00:00:00 is not in index\n","your target date 2017-04-30 00:00:00 is not in index\n","your target date 2017-05-06 00:00:00 is not in index\n","your target date 2017-05-07 00:00:00 is not in index\n"]}],"source":["# 실제 future_window 이후 수익률, 추출값 future_window만큼 이후 수익률 평균 표준편차 순으로 df 형성 함수\n","backtest_df = calculate_returns('2015-01-01', '2017-12-31', nasdaq, train_20df, future_window)\n","backtest_df"]},{"cell_type":"markdown","metadata":{"id":"bV3C_SDTuwfR"},"source":["## performance evaluation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qeqBl5RlxDNA"},"outputs":[],"source":["result = check_result(backtest_df, future_window)\n","result"]},{"cell_type":"markdown","metadata":{"id":"2aFPREGUm1in"},"source":["## develop evaluation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LflvhVmom0QF"},"outputs":[],"source":["future_window=[5] # 5일 성과가 더 좋아서"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cXA6LK1-omUY"},"outputs":[],"source":["develop_test_df = calculate_returns('2018-01-01', '2020-12-31', nasdaq, train_20df, future_window)\n","develop_test_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8MLAINcaQNAt"},"outputs":[],"source":["result = check_result(develop_test_df, future_window)\n","result"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"j4-QMqwdwuGy"},"outputs":[],"source":["# 초기 기준: 3% 이상/이하일 때 매수/매도 시그널 보고 rabalancing 하기\n","# 기준 자본: rabalancing 시점 자본 대비 3% 이상/이하\n","# 100주 사고 시작"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9F8MXzKYgwvB"},"outputs":[],"source":["def buysell_strategy(backtest_df, nasdaq_df, tolerance, std_per1, std_per2, per1, per2):\n","    cash_ratio = 0.0  # 초기 현금 비율 0%\n","    stock_ratio = 1.0  # 초기 주식 비율 100%\n","    portfolio_value = []  # 포트폴리오 가치를 저장할 리스트\n","\n","    backtest_df.index = pd.to_datetime(backtest_df.index)\n","    nasdaq_df.index = pd.to_datetime(nasdaq_df.index)\n","\n","    cash_value = 100.0\n","    stock_value = 100.0\n","\n","    stock_val_denominator = 100.0\n","    price_denominator = nasdaq_df.loc[backtest_df.index[0], 'price']\n","\n","    for window in future_window:\n","        for date in backtest_df.index:\n","            if date in nasdaq_df.index:\n","                price = nasdaq_df.loc[date, 'price']\n","                mean_p = backtest_df.loc[date, f'mean_{window}']\n","\n","                stock_value = stock_value * (price/price_denominator)\n","\n","                total_value = cash_ratio * cash_value + stock_ratio * stock_value\n","\n","\n","                if ((stock_value/stock_val_denominator-1)>=tolerance) or ((stock_value/stock_val_denominator-1)<= -tolerance):\n","                    if (mean_p >= result[f'result_{window}']['error_std']*std_per1):\n","                        cash_ratio -= cash_ratio * per1\n","                        stock_ratio += cash_ratio\n","                        cash_value = total_value\n","                        # 재조정\n","                        total_ratio = cash_ratio + stock_ratio\n","                        cash_ratio /= total_ratio\n","                        stock_ratio /= total_ratio\n","                    elif (mean_p >= result[f'result_{window}']['error_std']*std_per2):\n","                        cash_ratio -= cash_ratio * per2\n","                        stock_ratio += cash_ratio\n","                        cash_value = total_value\n","                        total_ratio = cash_ratio + stock_ratio\n","                        cash_ratio /= total_ratio\n","                        stock_ratio /= total_ratio\n","                    elif (mean_p <= -result[f'result_{window}']['error_std']*std_per1):\n","                        stock_ratio -= stock_ratio * per1\n","                        cash_ratio += stock_ratio\n","                        cash_value = total_value\n","                        total_ratio = cash_ratio + stock_ratio\n","                        cash_ratio /= total_ratio\n","                        stock_ratio /= total_ratio\n","                    elif (mean_p <= -result[f'result_{window}']['error_std']*std_per2):\n","                        stock_ratio -= stock_ratio * per2\n","                        cash_ratio += stock_ratio\n","                        cash_value = total_value\n","                        total_ratio = cash_ratio + stock_ratio\n","                        cash_ratio /= total_ratio\n","                        stock_ratio /= total_ratio\n","\n","                    stock_val_deniminator = stock_value\n","\n","\n","                # 포트폴리오 총 가치 (현금 + 주식 가치) 계산 후 저장\n","                total_value = cash_ratio * cash_value + stock_ratio * stock_value\n","                portfolio_value.append(total_value)\n","\n","                price_denominator = nasdaq_df.loc[date, 'price']\n","\n","    # 최종 자본에 대한 수익률 계산\n","    final_return_rate = total_value / portfolio_value[0] - 1\n","\n","    # Benchmark index 수익률 계산\n","    start_p = float(nasdaq[nasdaq.index == backtest_df.index[0]]['price'])\n","    end_p = float(nasdaq[nasdaq.index == backtest_df.index[-1]]['price'])\n","    BM_value = end_p/start_p -1\n","\n","    return final_return_rate, portfolio_value, BM_value\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9-rqPVgLadAp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690577277970,"user_tz":-540,"elapsed":515,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"009e22c7-c0c2-4c4f-b2b7-f556234a237c"},"outputs":[{"output_type":"stream","name":"stdout","text":["최종 수익률: 82.83%\n","BM 수익률: 86.69%\n"]}],"source":["# 함수 사용\n","# percent 부터 per2까지 for문 사용해서 최고 수익률 보이는 파라미터 조합 찾기\n","final_return_rate, portfolio_value, BM_value= buysell_strategy(develop_test_df, nasdaq, 0.02, 1.0, 0.55, 0.5, 0.3)\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')\n","print(f'BM 수익률: {BM_value * 100:.2f}%')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9zD08wjGHdZR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690577441087,"user_tz":-540,"elapsed":152342,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"46133d56-6f43-4b3f-e70f-073ed2c02cf3"},"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 6/6 [00:38<00:00,  6.34s/it]\n","100%|██████████| 6/6 [00:37<00:00,  6.30s/it]\n","100%|██████████| 6/6 [00:37<00:00,  6.31s/it]\n","100%|██████████| 6/6 [00:38<00:00,  6.36s/it]"]},{"output_type":"stream","name":"stdout","text":["Top 10 Performances:\n","Rank 1: Return Rate=85.48, Parameters=(0.05, 1.5, 0.25, 1.0, 0.3)\n","Rank 2: Return Rate=85.48, Parameters=(0.05, 1.5, 0.25, 0.9, 0.3)\n","Rank 3: Return Rate=85.48, Parameters=(0.05, 1.5, 0.25, 0.8, 0.3)\n","Rank 4: Return Rate=85.48, Parameters=(0.05, 1.5, 0.25, 0.7, 0.3)\n","Rank 5: Return Rate=85.48, Parameters=(0.05, 1.4, 0.25, 1.0, 0.3)\n","Rank 6: Return Rate=85.48, Parameters=(0.05, 1.4, 0.25, 0.9, 0.3)\n","Rank 7: Return Rate=85.48, Parameters=(0.05, 1.4, 0.25, 0.8, 0.3)\n","Rank 8: Return Rate=85.48, Parameters=(0.05, 1.4, 0.25, 0.7, 0.3)\n","Rank 9: Return Rate=85.48, Parameters=(0.05, 1.3, 0.25, 1.0, 0.3)\n","Rank 10: Return Rate=85.48, Parameters=(0.05, 1.3, 0.25, 0.9, 0.3)\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["# percent = 0.03 # parameter 1 : 초기 기준 대비 몇 % 이상/이하일 때 시그널 줄지 설정\n","# std_per1 = 1 # parameter 2 : 강매수/강매도 기준 %\n","# std_per2 = 0.5 # parameter 3 : 약매수/약매도 기준 %\n","# per1 = 0.5 # parameter 4 : 몇 % 비중으로 매수/매도할지\n","# per2 = 0.3 # parameter 5 : 몇 % 비중으로 매수/매도할지\n","\n","#percent  : 0.02~0.05(0.01단위)\n","#std_per1  : 1~1.5 (0.1단위)\n","#std_per2 : 0.25~0.75(0.1단위)\n","#per1 : 0.7~1.0(0.1단위)\n","#per2 : 0.3~0.6(0.1단위)\n","\n","best_performances = []\n","\n","for tolerance in range(2, 6, 1):\n","    tolerance /= 100.0\n","    for std_per1 in tqdm(range(10, 16)):\n","        std_per1 /= 10.0\n","        for std_per2 in range(25, 76, 10):\n","            std_per2 /= 100.0\n","            for per1 in range(7, 11):\n","                per1 /= 10.0\n","                for per2 in range(3, 7):\n","                    per2 /= 10.0\n","\n","                    final_return_rate, portfolio_value, BM_value = buysell_strategy(develop_test_df, nasdaq, tolerance, std_per1, std_per2, per1, per2)\n","\n","                    best_performances.append((final_return_rate, tolerance, std_per1, std_per2, per1, per2))\n","\n","best_performances.sort(reverse=True)\n","\n","print(\"Top 10 Performances:\")\n","for i in range(10):\n","    performance = best_performances[i]\n","    print(f\"Rank {i+1}: Return Rate={performance[0] * 100:.2f}, Parameters={performance[1:]}\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DpXlSNlfCCaa"},"outputs":[],"source":["# 함수 사용\n","# 최고 수익률 파라미터로 다시 적용\n","final_return_rate, portfolio_value, BM_value = buysell_strategy(develop_test_df, nasdaq, 0.05, 1.5, 0.75, 1.0, )\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')\n","print(f'BM 수익률: {BM_value * 100:.2f}%')"]},{"cell_type":"markdown","metadata":{"id":"nQAmZruqalOA"},"source":["## future test"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pi_FhzLNA298"},"outputs":[],"source":["# Top 3 Performances:\n","# Rank 1: Return Rate=92.55, Parameters=(0.05, 1.5, 0.25, 0.8, 0.8)\n","# Rank 2: Return Rate=92.55, Parameters=(0.05, 1.5, 0.25, 0.7, 0.8)\n","# Rank 3: Return Rate=92.55, Parameters=(0.05, 1.5, 0.25, 0.6, 0.8)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YSZZBGMkz5lY","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1690577799122,"user_tz":-540,"elapsed":305370,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"fa0cd356-99b5-4e86-db90-9639168ecbe8"},"outputs":[{"output_type":"stream","name":"stdout","text":["your target date 2022-01-01 00:00:00 is not in index\n","your target date 2022-01-02 00:00:00 is not in index\n","your target date 2022-01-08 00:00:00 is not in index\n","your target date 2022-01-09 00:00:00 is not in index\n","your target date 2022-01-15 00:00:00 is not in index\n","your target date 2022-01-16 00:00:00 is not in index\n","your target date 2022-01-17 00:00:00 is not in index\n","your target date 2022-01-22 00:00:00 is not in index\n","your target date 2022-01-23 00:00:00 is not in index\n","your target date 2022-01-29 00:00:00 is not in index\n","your target date 2022-01-30 00:00:00 is not in index\n","your target date 2022-02-05 00:00:00 is not in index\n","your target date 2022-02-06 00:00:00 is not in index\n","your target date 2022-02-12 00:00:00 is not in index\n","your target date 2022-02-13 00:00:00 is not in index\n","your target date 2022-02-19 00:00:00 is not in index\n","your target date 2022-02-20 00:00:00 is not in index\n","your target date 2022-02-21 00:00:00 is not in index\n","your target date 2022-02-26 00:00:00 is not in index\n","your target date 2022-02-27 00:00:00 is not in index\n","your target date 2022-03-05 00:00:00 is not in index\n","your target date 2022-03-06 00:00:00 is not in index\n","your target date 2022-03-12 00:00:00 is not in index\n","your target date 2022-03-13 00:00:00 is not in index\n","your target date 2022-03-19 00:00:00 is not in index\n","your target date 2022-03-20 00:00:00 is not in index\n","your target date 2022-03-26 00:00:00 is not in index\n","your target date 2022-03-27 00:00:00 is not in index\n","your target date 2022-04-02 00:00:00 is not in index\n","your target date 2022-04-03 00:00:00 is not in index\n","your target date 2022-04-09 00:00:00 is not in index\n","your target date 2022-04-10 00:00:00 is not in index\n","your target date 2022-04-15 00:00:00 is not in index\n","your target date 2022-04-16 00:00:00 is not in index\n","your target date 2022-04-17 00:00:00 is not in index\n","your target date 2022-04-23 00:00:00 is not in index\n","your target date 2022-04-24 00:00:00 is not in index\n","your target date 2022-04-30 00:00:00 is not in index\n","your target date 2022-05-01 00:00:00 is not in index\n","your target date 2022-05-07 00:00:00 is not in index\n","your target date 2022-05-08 00:00:00 is not in index\n","your target date 2022-05-14 00:00:00 is not in index\n","your target date 2022-05-15 00:00:00 is not in index\n","your target date 2022-05-21 00:00:00 is not in index\n","your target date 2022-05-22 00:00:00 is not in index\n","your target date 2022-05-28 00:00:00 is not in index\n","your target date 2022-05-29 00:00:00 is not in index\n","your target date 2022-05-30 00:00:00 is not in index\n","your target date 2022-06-04 00:00:00 is not in index\n","your target date 2022-06-05 00:00:00 is not in index\n","your target date 2022-06-11 00:00:00 is not in index\n","your target date 2022-06-12 00:00:00 is not in index\n","your target date 2022-06-18 00:00:00 is not in index\n","your target date 2022-06-19 00:00:00 is not in index\n","your target date 2022-06-20 00:00:00 is not in index\n","your target date 2022-06-25 00:00:00 is not in index\n","your target date 2022-06-26 00:00:00 is not in index\n","your target date 2022-07-02 00:00:00 is not in index\n","your target date 2022-07-03 00:00:00 is not in index\n","your target date 2022-07-04 00:00:00 is not in index\n","your target date 2022-07-09 00:00:00 is not in index\n","your target date 2022-07-10 00:00:00 is not in index\n","your target date 2022-07-16 00:00:00 is not in index\n","your target date 2022-07-17 00:00:00 is not in index\n","your target date 2022-07-23 00:00:00 is not in index\n","your target date 2022-07-24 00:00:00 is not in index\n","your target date 2022-07-30 00:00:00 is not in index\n","your target date 2022-07-31 00:00:00 is not in index\n","your target date 2022-08-06 00:00:00 is not in index\n","your target date 2022-08-07 00:00:00 is not in index\n","your target date 2022-08-13 00:00:00 is not in index\n","your target date 2022-08-14 00:00:00 is not in index\n","your target date 2022-08-20 00:00:00 is not in index\n","your target date 2022-08-21 00:00:00 is not in index\n","your target date 2022-08-27 00:00:00 is not in index\n","your target date 2022-08-28 00:00:00 is not in index\n","your target date 2022-09-03 00:00:00 is not in index\n","your target date 2022-09-04 00:00:00 is not in index\n","your target date 2022-09-05 00:00:00 is not in index\n","your target date 2022-09-10 00:00:00 is not in index\n","your target date 2022-09-11 00:00:00 is not in index\n","your target date 2022-09-17 00:00:00 is not in index\n","your target date 2022-09-18 00:00:00 is not in index\n","your target date 2022-09-24 00:00:00 is not in index\n","your target date 2022-09-25 00:00:00 is not in index\n","your target date 2022-10-01 00:00:00 is not in index\n","your target date 2022-10-02 00:00:00 is not in index\n","your target date 2022-10-08 00:00:00 is not in index\n","your target date 2022-10-09 00:00:00 is not in index\n","your target date 2022-10-15 00:00:00 is not in index\n","your target date 2022-10-16 00:00:00 is not in index\n","your target date 2022-10-22 00:00:00 is not in index\n","your target date 2022-10-23 00:00:00 is not in index\n","your target date 2022-10-29 00:00:00 is not in index\n","your target date 2022-10-30 00:00:00 is not in index\n","your target date 2022-11-05 00:00:00 is not in index\n","your target date 2022-11-06 00:00:00 is not in index\n","your target date 2022-11-12 00:00:00 is not in index\n","your target date 2022-11-13 00:00:00 is not in index\n","your target date 2022-11-19 00:00:00 is not in index\n","your target date 2022-11-20 00:00:00 is not in index\n","your target date 2022-11-24 00:00:00 is not in index\n","your target date 2022-11-26 00:00:00 is not in index\n","your target date 2022-11-27 00:00:00 is not in index\n","your target date 2022-12-03 00:00:00 is not in index\n","your target date 2022-12-04 00:00:00 is not in index\n","your target date 2022-12-10 00:00:00 is not in index\n","your target date 2022-12-11 00:00:00 is not in index\n","your target date 2022-12-17 00:00:00 is not in index\n","your target date 2022-12-18 00:00:00 is not in index\n","your target date 2022-12-24 00:00:00 is not in index\n","your target date 2022-12-25 00:00:00 is not in index\n","your target date 2022-12-26 00:00:00 is not in index\n","your target date 2022-12-31 00:00:00 is not in index\n","your target date 2023-01-01 00:00:00 is not in index\n","your target date 2023-01-02 00:00:00 is not in index\n","your target date 2023-01-07 00:00:00 is not in index\n","your target date 2023-01-08 00:00:00 is not in index\n","your target date 2023-01-14 00:00:00 is not in index\n","your target date 2023-01-15 00:00:00 is not in index\n","your target date 2023-01-16 00:00:00 is not in index\n","your target date 2023-01-21 00:00:00 is not in index\n","your target date 2023-01-22 00:00:00 is not in index\n","your target date 2023-01-28 00:00:00 is not in index\n","your target date 2023-01-29 00:00:00 is not in index\n","your target date 2023-02-04 00:00:00 is not in index\n","your target date 2023-02-05 00:00:00 is not in index\n","your target date 2023-02-11 00:00:00 is not in index\n","your target date 2023-02-12 00:00:00 is not in index\n","your target date 2023-02-18 00:00:00 is not in index\n","your target date 2023-02-19 00:00:00 is not in index\n","your target date 2023-02-20 00:00:00 is not in index\n","your target date 2023-02-25 00:00:00 is not in index\n","your target date 2023-02-26 00:00:00 is not in index\n","your target date 2023-03-04 00:00:00 is not in index\n","your target date 2023-03-05 00:00:00 is not in index\n","your target date 2023-03-11 00:00:00 is not in index\n","your target date 2023-03-12 00:00:00 is not in index\n","your target date 2023-03-18 00:00:00 is not in index\n","your target date 2023-03-19 00:00:00 is not in index\n","your target date 2023-03-25 00:00:00 is not in index\n","your target date 2023-03-26 00:00:00 is not in index\n","your target date 2023-04-01 00:00:00 is not in index\n","your target date 2023-04-02 00:00:00 is not in index\n","your target date 2023-04-07 00:00:00 is not in index\n","your target date 2023-04-08 00:00:00 is not in index\n","your target date 2023-04-09 00:00:00 is not in index\n","your target date 2023-04-15 00:00:00 is not in index\n","your target date 2023-04-16 00:00:00 is not in index\n","your target date 2023-04-22 00:00:00 is not in index\n","your target date 2023-04-23 00:00:00 is not in index\n","your target date 2023-04-29 00:00:00 is not in index\n","your target date 2023-04-30 00:00:00 is not in index\n","your target date 2023-05-06 00:00:00 is not in index\n","your target date 2023-05-07 00:00:00 is not in index\n","your target date 2023-05-13 00:00:00 is not in index\n","your target date 2023-05-14 00:00:00 is not in index\n","your target date 2023-05-20 00:00:00 is not in index\n","your target date 2023-05-21 00:00:00 is not in index\n","your target date 2023-05-27 00:00:00 is not in index\n","your target date 2023-05-28 00:00:00 is not in index\n","your target date 2023-05-29 00:00:00 is not in index\n","your target date 2023-06-03 00:00:00 is not in index\n","your target date 2023-06-04 00:00:00 is not in index\n","your target date 2023-06-10 00:00:00 is not in index\n","your target date 2023-06-11 00:00:00 is not in index\n"]},{"output_type":"execute_result","data":{"text/plain":["            return_5    mean_5     std_5\n","2021-12-31 -0.045323  0.004135  0.034556\n","2022-01-03 -0.056211  0.007472  0.025447\n","2022-01-04 -0.030038  0.000819  0.035551\n","2022-01-05  0.005842  0.003942  0.020843\n","2022-01-06 -0.018172  0.001305  0.020783\n","...              ...       ...       ...\n","2023-06-09  0.032463  0.005499  0.024696\n","2023-06-12  0.015256  0.012256  0.030853\n","2023-06-13  -0.00524  0.012987  0.026596\n","2023-06-14  0.000303  0.009163  0.026327\n","2023-06-15 -0.021063 -0.001557  0.029374\n","\n","[366 rows x 3 columns]"],"text/html":["\n","\n","  <div id=\"df-9bf88f9b-0a61-4e3d-9fa5-b798db436f45\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_5</th>\n","      <th>mean_5</th>\n","      <th>std_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2021-12-31</th>\n","      <td>-0.045323</td>\n","      <td>0.004135</td>\n","      <td>0.034556</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-03</th>\n","      <td>-0.056211</td>\n","      <td>0.007472</td>\n","      <td>0.025447</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-04</th>\n","      <td>-0.030038</td>\n","      <td>0.000819</td>\n","      <td>0.035551</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-05</th>\n","      <td>0.005842</td>\n","      <td>0.003942</td>\n","      <td>0.020843</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-06</th>\n","      <td>-0.018172</td>\n","      <td>0.001305</td>\n","      <td>0.020783</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-09</th>\n","      <td>0.032463</td>\n","      <td>0.005499</td>\n","      <td>0.024696</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-12</th>\n","      <td>0.015256</td>\n","      <td>0.012256</td>\n","      <td>0.030853</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-13</th>\n","      <td>-0.00524</td>\n","      <td>0.012987</td>\n","      <td>0.026596</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-14</th>\n","      <td>0.000303</td>\n","      <td>0.009163</td>\n","      <td>0.026327</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-15</th>\n","      <td>-0.021063</td>\n","      <td>-0.001557</td>\n","      <td>0.029374</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>366 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9bf88f9b-0a61-4e3d-9fa5-b798db436f45')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-df82ef80-df3d-4de5-ace3-bd2d0d33ae11\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df82ef80-df3d-4de5-ace3-bd2d0d33ae11')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-df82ef80-df3d-4de5-ace3-bd2d0d33ae11 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9bf88f9b-0a61-4e3d-9fa5-b798db436f45 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9bf88f9b-0a61-4e3d-9fa5-b798db436f45');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":94}],"source":["future_test_df = calculate_returns('2022-01-01', '2023-06-15', nasdaq, train_20df, future_window)\n","future_test_df"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sj6DypLI2KC2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690577806443,"user_tz":-540,"elapsed":577,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"d5872475-209c-4991-f742-563ac22e7bf3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'result_5': {'soso_5': 77,\n","  'large_std_5': 0,\n","  'pos_true_5': 75,\n","  'pos_false_5': 91,\n","  'neg_true_5': 40,\n","  'neg_false_5': 83,\n","  'error_mean': -0.002648120289183191,\n","  'error_std': 0.037567537053102826}}"]},"metadata":{},"execution_count":95}],"source":["result = check_result(future_test_df, future_window)\n","result"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dx8CSHgB4lPg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690577866814,"user_tz":-540,"elapsed":425,"user":{"displayName":"김선우학부생","userId":"09273756879419448367"}},"outputId":"b6382498-0457-43ca-fe38-2ccc92967515"},"outputs":[{"output_type":"stream","name":"stdout","text":["최종 수익률: -11.92%\n","BM 수익률: -11.90%\n"]}],"source":["# 함수 사용\n","final_return_rate, portfolio_value, BM_value = buysell_strategy(future_test_df, nasdaq, 0.05, 1.5, 0.25, 1.0, 0.3)\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')\n","print(f'BM 수익률: {BM_value * 100:.2f}%')"]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1VNZqO7UkAsE4JrzWz-CmYFf8n8CjpZQ-","timestamp":1687521763752}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false}},"nbformat":4,"nbformat_minor":0}