{"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"WQtSq-0FpKcf","executionInfo":{"status":"ok","timestamp":1688131769845,"user_tz":-540,"elapsed":1381,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","# from yahoo_fin import options\n","import yfinance as yf\n","from datetime import datetime, timedelta\n","from datetime import date\n","from dateutil.parser import parse # 데이트 형식 자동변환\n","from copy import copy\n","from scipy.spatial import distance\n","from dateutil.relativedelta import relativedelta"]},{"cell_type":"markdown","metadata":{"id":"7lFxQQ6xrNHZ"},"source":["## 1. functions"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"cwd7z4xwrNeb","executionInfo":{"status":"ok","timestamp":1688131769846,"user_tz":-540,"elapsed":7,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# 주가, 거래량 데이터 받는 함수\n","def get_fin_data(ticker, period):\n","    # yahoo finance에서 데이터 불러오기\n","    df = pd.DataFrame(yf.download(tickers=ticker, period=period)[['Adj Close','Volume']])\n","    df.rename(columns = {'Adj Close':'price'},inplace=True)\n","\n","    return df"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"AuyTQWqHrOCK","executionInfo":{"status":"ok","timestamp":1688131769846,"user_tz":-540,"elapsed":6,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# 과거 대비 수익률 데이터 & 미래 수익률 데이터\n","def cal_return(df, window_sizes, future):\n","    df_return =copy(df)\n","    train_col = [] # train data 들어갈 것\n","    test_col = [] # 실제 비교할 data에 들어갈 것\n","\n","    # window 사이즈만큼 이동한 주가 데이터\n","    for window in window_sizes:\n","        df_return[f'p_b{window}'] = df['price'].shift(window)\n","\n","    # 과거 대비 로그 평균 수익률 데이터\n","    for window in window_sizes:\n","        df_return[f'return_b{window}'] = (np.log(df['price']) - np.log(df_return[f'p_b{window}'])) / window\n","        train_col.append(f'return_b{window}')\n","\n","    # 미래만큼 이동한 데이터\n","    for after in future:\n","        df_return[f'p_a{after}'] = df['price'].shift(-after)\n","\n","    # 미래 일반(로그x) 수익률\n","    for after in future:\n","        df_return[f'return_a{after}'] = (df_return[f'p_a{after}']) / (df_return['price']) -1\n","        test_col.append(f'return_a{after}')\n","\n","    train_df = df_return[train_col]\n","    test_df = df_return[test_col]\n","\n","    return train_df, test_df"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"GXD0KryCrORt","executionInfo":{"status":"ok","timestamp":1688131769846,"user_tz":-540,"elapsed":6,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# 거래량 z-score 구하기\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_zscore(df, vol_len, scale):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_df[f'vol_mean{window}'] = df['Volume'].rolling(window).mean()\n","        vol_df[f'vol_std{window}'] = df['Volume'].rolling(window).std()\n","        vol_df[f'vol_z{window}'] = (df['Volume'].rolling(vol_len).median() - vol_df[f'vol_mean{window}']) / vol_df[f'vol_std{window}']\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df\n","\n","# 거래량의 스케일된 점수\n","# 최근 N 기간의 거래량대비 최근 k일간의 거래량으로 scale down\n","# (data - mean(data, axis=0)) / std(data, axis=0)\n","def vol_scaled_zscore(df, scale = [20, 40, 60, 80, 100, 120], std_scale = 240, base_N = 1000):\n","    vol_df = copy(df)\n","    vol_col = []\n","    for window in scale:\n","        vol_mean_scaled = df['Volume'].rolling(window).mean() / df['Volume'].rolling(base_N).mean() # 이 값은 평균 1에서 오실레이트 할 것임.\n","        vol_df[f'vol_z{window}'] = vol_mean_scaled / vol_mean_scaled.rolling(std_scale).std() # 스케일된 vol_mean을 위에서 오실레이트 하는 수준의 std로 나누기\n","        vol_col.append(f'vol_z{window}')\n","\n","    vol_z_df = vol_df[vol_col]\n","\n","    return vol_z_df"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"oe71Pi19ucuO","executionInfo":{"status":"ok","timestamp":1688131769847,"user_tz":-540,"elapsed":7,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# 유사도 구하는 방식 L1, L2\n","def calculate_l2_distance(start_value, target_value):\n","    squared_diff = np.power(start_value - target_value, 2)\n","    sum_squared_diff = np.sum(squared_diff)\n","    l2_distance = np.sqrt(sum_squared_diff)\n","    return l2_distance\n","\n","def calculate_l1_distance(start_value, target_value):\n","    abs_diff = np.abs(start_value - target_value)\n","    l1_distance = np.sum(abs_diff)\n","    return l1_distance"]},{"cell_type":"code","source":["# def extract_closest_indices(df, train_df, raw_target_index, future_window, n=30, distance_metric='l1'):\n","#     df_index = pd.to_datetime(train_df.index) # train_df의 index를 datatime 형식으로.\n","#     distances = {}\n","#     #raw_target_index = pd.to_datetime(raw_target_index)\n","\n","#     # raw target index를 df에 있는 인덱스로 변환\n","#     if raw_target_index not in df_index:\n","#         new_index = df_index[df_index <= raw_target_index][-1]\n","#         # print(f\"your target date {raw_target_index} is replaced to {new_index}\")\n","#         target_index = new_index\n","#     else:\n","#         target_index = copy(raw_target_index)#.copy()\n","\n","#     target_value = train_df.loc[target_index].values#[0]\n","\n","#     # L1 & L2 중 선택한 방법 방식 불러오기\n","#     if distance_metric == 'l1':\n","#         distance_function = calculate_l1_distance\n","#     elif distance_metric == 'l2':\n","#         distance_function = calculate_l2_distance\n","#     else:\n","#         raise ValueError(\"Invalid distance metric. Use 'l1' or 'l2'.\")\n","\n","#     # target index와 과거의 index와 거리 계산\n","#     for index in train_df.index:\n","#         if index != target_index and index < target_index:\n","#             distance = distance_function(train_df.loc[index].values, target_value)\n","#             distances[index] = distance\n","#     # 거리 기준 n 개 추출\n","#     closest_indices = sorted(distances, key=distances.get)[:n]\n","#     returns = np.zeros((len(closest_indices), len(future_window)))\n","\n","#     # 추출된 인덱스의 수익률 계산\n","#     for i, index in enumerate(closest_indices):\n","#       for j, window in enumerate(future_window):\n","#           return_value = (df.at[train_df.index[train_df.index >= index][window], 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","#           returns[i, j] = return_value\n","\n","#     # 수정 전\n","#     # for i, index in enumerate(closest_indices):\n","#     #     for j, window in enumerate(future_window):\n","#     #         if index + pd.DateOffset(days=window) in train_df.index:\n","#     #             return_value = (df.at[index + pd.DateOffset(days=window), 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","#     #         else:\n","#     #             closest_date = df_index[df_index <= index][-1]\n","#     #             next_index = df_index[df_index <= (closest_date + pd.DateOffset(days=window))][-1]\n","#     #             return_value = (df.at[next_index, 'price'] - df.at[closest_date, 'price']) / df.at[closest_date, 'price']\n","#     #         returns[i, j] = return_value\n","\n","#     # 각 컬럼의 mean, std\n","\n","#     returns_df = pd.DataFrame(returns, columns=['return_{}'.format(window) for window in future_window])\n","#     mean = returns_df.mean()\n","#     std = returns_df.std()\n","\n","#     results = []\n","#     for col in returns_df.columns:\n","#         results.extend([mean[col], std[col]])\n","\n","#     real_results = []\n","#     for window in future_window:\n","#         # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","#         next_date = train_df.index[train_df.index >= target_index][window]\n","#         # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","#         real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","#         real_results.append(real_return)\n","\n","#     # for window in future_window:\n","#     #     # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","#     #     next_date = train_df.index[train_df.index >= target_index][window]\n","#     #     # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","#     #     real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","#     #     results.append(real_return)\n","\n","\n","#     return results, real_results"],"metadata":{"id":"yi7nc9orOCfo","executionInfo":{"status":"ok","timestamp":1688131769847,"user_tz":-540,"elapsed":6,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def extract_closest_indices(df, train_df, raw_target_index, future_window, n=30, distance_metric='l1'):\n","    df_index = pd.to_datetime(train_df.index) # train_df의 index를 datatime 형식으로.\n","    distances = {}\n","    #raw_target_index = pd.to_datetime(raw_target_index)\n","\n","    # raw target index를 df에 있는 인덱스로 변환\n","    if raw_target_index not in df_index:\n","        print(f\"your target date {raw_target_index} is not in index\")\n","        return \"no\"\n","    else:\n","        target_index = copy(raw_target_index)#.copy()\n","\n","        target_value = train_df.loc[target_index].values#[0]\n","\n","        # L1 & L2 중 선택한 방법 방식 불러오기\n","        if distance_metric == 'l1':\n","            distance_function = calculate_l1_distance\n","        elif distance_metric == 'l2':\n","            distance_function = calculate_l2_distance\n","        else:\n","            raise ValueError(\"Invalid distance metric. Use 'l1' or 'l2'.\")\n","\n","        # target index와 과거의 index와 거리 계산\n","        for index in train_df.index:\n","            if index != target_index and index < target_index:\n","                distance = distance_function(train_df.loc[index].values, target_value)\n","                distances[index] = distance\n","        # 거리 기준 n 개 추출\n","        closest_indices = sorted(distances, key=distances.get)[:n]\n","        returns = np.zeros((len(closest_indices), len(future_window)))\n","\n","        # 추출된 인덱스의 수익률 계산\n","        for i, index in enumerate(closest_indices):\n","            for j, window in enumerate(future_window):\n","                return_value = (df.at[train_df.index[train_df.index >= index][window], 'price'] - df.at[index, 'price']) / df.at[index, 'price']\n","                returns[i, j] = return_value\n","\n","        returns_df = pd.DataFrame(returns, columns=['return_{}'.format(window) for window in future_window])\n","        mean = returns_df.mean()\n","        std = returns_df.std()\n","\n","        results = []\n","        for col in returns_df.columns:\n","            results.extend([mean[col], std[col]])\n","\n","        real_results = []\n","        for window in future_window:\n","            # next_date = df_index[df_index <= (target_index + pd.DateOffset(days=window))][-1]\n","            next_date = train_df.index[train_df.index >= target_index][window]\n","            # real_return = (df.at[next_date, 'price'] - df.at[target_index, 'price']) / df.at[target_index, 'price']\n","            real_return = (df.at[next_date, 'price'] / df.at[target_index, 'price']) -1\n","            real_results.append(real_return)\n","\n","        return results, real_results"],"metadata":{"id":"etPtS1btwQ37","executionInfo":{"status":"ok","timestamp":1688131770869,"user_tz":-540,"elapsed":1028,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","execution_count":11,"metadata":{"id":"IklfOQHsi6Ii","executionInfo":{"status":"ok","timestamp":1688131770870,"user_tz":-540,"elapsed":49,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# def calculate_returns(start_date, end_date, df, train_df, future_window):\n","#     result_columns = []\n","#     for window in future_window:\n","#         result_columns.extend(['return_{}'.format(window), 'mean_{}'.format(window), 'std_{}'.format(window)])\n","\n","#     result_df = pd.DataFrame(columns=result_columns)\n","\n","#     df_index = pd.to_datetime(df.index)\n","#     start_date = pd.to_datetime(start_date)\n","#     end_date = pd.to_datetime(end_date)\n","\n","#     if start_date not in df_index:\n","#         closest_start_date = df_index[df_index <= start_date][-1]\n","#         start_date = df_index[df_index == closest_start_date][0]\n","\n","#     if end_date not in df_index:\n","#         closest_end_date = df_index[df_index >= end_date][0]\n","#         end_date = df_index[df_index == closest_end_date][0]\n","\n","#     current_index = start_date\n","\n","#     while current_index <= end_date:\n","#         results, real_results = extract_closest_indices(df, train_df, current_index, future_window)\n","#         for i, window in enumerate(future_window):\n","#             result_df.loc[current_index, 'return_{}'.format(window)] = real_results[i]\n","#             result_df.loc[current_index, 'mean_{}'.format(window)] = results[i*2]\n","#             result_df.loc[current_index, 'std_{}'.format(window)] = results[i*2-1]\n","#             # result_df.loc[current_index, 'return_{}'.format(window)] = results[-(4-i)]\n","#             # result_df.loc[current_index, 'mean_{}'.format(window)] = results[2*i]\n","#             # result_df.loc[current_index, 'std_{}'.format(window)] = results[2*i+1]\n","\n","#         current_index = df_index[df_index >= current_index][0]\n","#         current_index += pd.DateOffset(days=1)\n","\n","#     result_df = result_df[result_df.index.isin(df.index)]\n","\n","#     return result_df"]},{"cell_type":"code","source":["def calculate_returns(start_date, end_date, df, train_df, future_window):\n","    result_columns = []\n","    for window in future_window:\n","        result_columns.extend(['return_{}'.format(window), 'mean_{}'.format(window), 'std_{}'.format(window)])\n","\n","    result_df = pd.DataFrame(columns=result_columns)\n","\n","    df_index = pd.to_datetime(df.index)\n","    start_date = pd.to_datetime(start_date)\n","    end_date = pd.to_datetime(end_date)\n","\n","    if start_date not in df_index:\n","        closest_start_date = df_index[df_index <= start_date][-1]\n","        start_date = df_index[df_index == closest_start_date][0]\n","\n","    if end_date not in df_index:\n","        closest_end_date = df_index[df_index >= end_date][0]\n","        end_date = df_index[df_index == closest_end_date][0]\n","\n","    current_index = start_date\n","\n","    while current_index <= end_date:\n","        if extract_closest_indices(df, train_df, current_index, future_window) == \"no\":\n","            pass\n","        else:\n","            results, real_results = extract_closest_indices(df, train_df, current_index, future_window)\n","            for i, window in enumerate(future_window):\n","                result_df.loc[current_index, 'return_{}'.format(window)] = real_results[i]\n","                result_df.loc[current_index, 'mean_{}'.format(window)] = results[i*2]\n","                result_df.loc[current_index, 'std_{}'.format(window)] = results[i*2-1]\n","\n","            current_index = df_index[df_index >= current_index][0]\n","        current_index += pd.DateOffset(days=1)\n","\n","#     result_df = result_df[result_df.index.isin(df.index)]\n","\n","    return result_df"],"metadata":{"id":"PlQ7sOwdOP-u","executionInfo":{"status":"ok","timestamp":1688131770871,"user_tz":-540,"elapsed":49,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","execution_count":13,"metadata":{"id":"FlWmdft3JsED","executionInfo":{"status":"ok","timestamp":1688131770872,"user_tz":-540,"elapsed":49,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# 실제 수익률이랑 같은 방향인지 체크\n","def check_sign(x, y):\n","    if (x * y) > 0:\n","        return True\n","    else:\n","        return False"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"LaTaKD9AJrkn","executionInfo":{"status":"ok","timestamp":1688131770873,"user_tz":-540,"elapsed":50,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# # 실제 미래 수익률값과 비교해봤을 때 얼마나 잘 맞췄는지 확인\n","# def check_result(return_df, future_window):\n","#     result_dict = {}\n","\n","#     for window in future_window:\n","#         result_dict['result_{}'.format(window)] = {\n","#             # 'good_{}'.format(window): 0,\n","#             # 'bad_{}'.format(window): 0,\n","#             'soso_{}'.format(window): 0,\n","#             'large_std_{}'.format(window): 0,\n","#             # 'false_positive_len'.format(window):0,\n","#             # 'false_positive_mean'.format(window):0,\n","#             # 'false_positive_std'.format(window):0,\n","#             # 'false_negative_len'.format(window):0,\n","#             # 'false_negative_mean'.format(window):0,\n","#             # 'false_negative_std'.format(window):0,\n","#             'error_mean'.format(window):0,\n","#             'error_std'.format(window):0\n","#             }\n","\n","\n","#     for window in future_window:\n","#         # bad, real_return > mean_return\n","#         # plus_error = []\n","#         # bad, real_return < mean_return\n","#         # minus_error = []\n","#         # total bad\n","#         total_error = []\n","#         for i in range(len(return_df)):\n","#             real_return = return_df['return_{}'.format(window)][i]\n","#             mean_return = return_df['mean_{}'.format(window)][i]\n","#             std = return_df['std_{}'.format(window)][i]\n","#             # mean - std: minus_std, mean + std: plus_std\n","#             minus_std = mean_return - std\n","#             plus_std = mean_return + std\n","\n","#             # 표준편차가 클 때(5% 기준)\n","#             if std >= 0.05:\n","#                 result_dict['result_{}'.format(window)]['large_std_{}'.format(window)] += 1\n","#             # 방향성 같은지 체크\n","#             elif check_sign(real_return, mean_return):\n","#                 # 방향성 같고, range 안에 있을 때\n","#                 if (real_return > minus_std) and (mean_return < plus_std):\n","#                     result_dict['result_{}'.format(window)]['good_{}'.format(window)] += 1\n","#                 # 방향성 같은데, range 밖에 있을 때\n","#                 else:\n","#                     result_dict['result_{}'.format(window)]['soso_{}'.format(window)] += 1\n","#             else:\n","#                 result_dict['result_{}'.format(window)]['bad_{}'.format(window)] += 1\n","#                 # if real_return> mean_return:\n","#                 #     # plus_error.append(real_return - mean_return)\n","#                 # else:\n","#                 #     # minus_error.append(real_return - mean_return)\n","#             total_error.append(real_return - mean_return)\n","\n","#         # result_dict['result_{}'.format(window)]['false_positive_len'.format(window)]=len(plus_error)\n","#         # result_dict['result_{}'.format(window)]['false_positive_mean'.format(window)]=np.mean(plus_error)\n","#         # result_dict['result_{}'.format(window)]['false_positive_std'.format(window)]=np.std(plus_error)\n","#         # result_dict['result_{}'.format(window)]['false_negative_len'.format(window)]=len(minus_error)\n","#         # result_dict['result_{}'.format(window)]['false_negative_mean'.format(window)]=np.mean(minus_error)\n","#         # result_dict['result_{}'.format(window)]['false_negative_std'.format(window)]=np.std(minus_error)\n","#         result_dict['result_{}'.format(window)]['error_mean'.format(window)]=np.mean(total_error)\n","#         result_dict['result_{}'.format(window)]['error_std'.format(window)]=np.std(total_error)\n","\n","#     return result_dict"]},{"cell_type":"code","source":["# 실제 미래 수익률값과 비교해봤을 때 얼마나 잘 맞췄는지 확인\n","def check_result(return_df, future_window):\n","    result_dict = {}\n","\n","    for window in future_window:\n","        result_dict['result_{}'.format(window)] = {\n","            'soso_{}'.format(window): 0,\n","            'large_std_{}'.format(window): 0,\n","            'pos_true_{}'.format(window): 0,\n","            'pos_false_{}'.format(window):0,\n","            'neg_true_{}'.format(window):0,\n","            'neg_false_{}'.format(window):0,\n","            'error_mean'.format(window):0,\n","            'error_std'.format(window):0\n","            }\n","\n","\n","    for window in future_window:\n","        # bad, real_return > mean_return\n","        # plus_error = []\n","        # bad, real_return < mean_return\n","        # minus_error = []\n","        # total bad\n","        total_error = []\n","        for i in range(len(return_df)):\n","            real_return = return_df['return_{}'.format(window)][i]\n","            mean_return = return_df['mean_{}'.format(window)][i]\n","            std = return_df['std_{}'.format(window)][i]\n","            # mean - std: minus_std, mean + std: plus_std\n","            minus_std = mean_return - std\n","            plus_std = mean_return + std\n","\n","            # 표준편차가 클 때(5% 기준)\n","            if std >= 0.05:\n","                result_dict['result_{}'.format(window)]['large_std_{}'.format(window)] += 1\n","\n","            # positive/negative: 매수/매도, true/false:맞췄을 때/틀렸을 때\n","            # 방향성 같은지 체크: true일 때\n","            elif check_sign(real_return, mean_return):\n","                # 방향성 같고, range 안에 있을 때\n","                if (real_return > minus_std) and (real_return < plus_std):\n","                    # 매수일 때\n","                    if mean_return > 0 :\n","                      result_dict['result_{}'.format(window)]['pos_true_{}'.format(window)] += 1\n","                    # 매도일 때\n","                    else:\n","                      result_dict['result_{}'.format(window)]['neg_true_{}'.format(window)] += 1\n","                # 방향성 같은데, range 밖에 있을 때\n","                else:\n","                    result_dict['result_{}'.format(window)]['soso_{}'.format(window)] += 1\n","            # 방향성 틀렸을 때\n","            else:\n","              # 매수 신호인데 틀렸을 때\n","              if mean_return > 0 :\n","                result_dict['result_{}'.format(window)]['pos_false_{}'.format(window)] += 1\n","              # 매도일 때\n","              else:\n","                result_dict['result_{}'.format(window)]['neg_false_{}'.format(window)] += 1\n","\n","            total_error.append(real_return - mean_return)\n","\n","        # result_dict['result_{}'.format(window)]['false_positive_len'.format(window)]=len(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_mean'.format(window)]=np.mean(plus_error)\n","        # result_dict['result_{}'.format(window)]['false_positive_std'.format(window)]=np.std(plus_error)\n","        result_dict['result_{}'.format(window)]['error_mean'.format(window)]=np.mean(total_error)\n","        result_dict['result_{}'.format(window)]['error_std'.format(window)]=np.std(total_error)\n","\n","    return result_dict"],"metadata":{"id":"Ln3Hp9qedUoL","executionInfo":{"status":"ok","timestamp":1688132936981,"user_tz":-540,"elapsed":3,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WNxS6hM4qXkK"},"source":["## 2. data preprocessing"]},{"cell_type":"markdown","metadata":{"id":"NFNtU71dt9zo"},"source":["### price data"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"qkQI7n_lr6bM","outputId":"b967af4c-5593-4a0a-a910-c60fef4c5f28","executionInfo":{"status":"ok","timestamp":1688131770874,"user_tz":-540,"elapsed":49,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["\r[*********************100%***********************]  1 of 1 completed\n"]},{"output_type":"execute_result","data":{"text/plain":["                   price      Volume\n","Date                                \n","1971-02-05    100.000000           0\n","1971-02-08    100.839996           0\n","1971-02-09    100.760002           0\n","1971-02-10    100.690002           0\n","1971-02-11    101.449997           0\n","...                  ...         ...\n","2023-06-23  13492.519531  7734500000\n","2023-06-26  13335.780273  4430600000\n","2023-06-27  13555.669922  5053660000\n","2023-06-28  13591.750000  4533270000\n","2023-06-29  13591.330078  4388140000\n","\n","[13214 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-a79fd2ed-35ab-4d19-97b8-a21653f6d23e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>Volume</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>100.000000</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>100.839996</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>100.760002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>100.690002</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>101.449997</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>13492.519531</td>\n","      <td>7734500000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>13335.780273</td>\n","      <td>4430600000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>13555.669922</td>\n","      <td>5053660000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>13591.750000</td>\n","      <td>4533270000</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>13591.330078</td>\n","      <td>4388140000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13214 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a79fd2ed-35ab-4d19-97b8-a21653f6d23e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a79fd2ed-35ab-4d19-97b8-a21653f6d23e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a79fd2ed-35ab-4d19-97b8-a21653f6d23e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":16}],"source":["# download data\n","ticker = \"^IXIC\"\n","period = \"max\" # period: max, 1y, 5y etc.\n","\n","nasdaq = get_fin_data(ticker, period)\n","nasdaq"]},{"cell_type":"code","execution_count":17,"metadata":{"id":"6XbrqKrOozfI","executionInfo":{"status":"ok","timestamp":1688131770875,"user_tz":-540,"elapsed":42,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["nasdaq.index = pd.to_datetime(nasdaq.index)"]},{"cell_type":"code","execution_count":18,"metadata":{"id":"9Q3CfeVUr1Tc","executionInfo":{"status":"ok","timestamp":1688131770875,"user_tz":-540,"elapsed":39,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[],"source":["# parameters\n","today = nasdaq.index[-1]#.date()\n","year = today - relativedelta(years=20)\n","window_sizes = [20, 40, 60, 80, 100]\n","future_window = [5, 10] # future 이후 수익률\n","sort_num = 30 # 유사도 sorting 할 길이"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":892},"id":"pLH1sRDit1z1","outputId":"711ee1ee-d8a6-4cb2-f38b-23835419dcbd","executionInfo":{"status":"ok","timestamp":1688131770877,"user_tz":-540,"elapsed":40,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100\n","Date                                                                   \n","1971-02-05         NaN         NaN         NaN         NaN          NaN\n","1971-02-08         NaN         NaN         NaN         NaN          NaN\n","1971-02-09         NaN         NaN         NaN         NaN          NaN\n","1971-02-10         NaN         NaN         NaN         NaN          NaN\n","1971-02-11         NaN         NaN         NaN         NaN          NaN\n","...                ...         ...         ...         ...          ...\n","2023-06-23    0.003884    0.003236    0.002353    0.002046     0.001691\n","2023-06-26    0.002450    0.002344    0.001862    0.001983     0.001408\n","2023-06-27    0.002186    0.002580    0.002013    0.002096     0.001373\n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080\n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239\n","\n","[13214 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-f8cd0c1a-3d77-4c87-befd-f24e292d97a2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>0.003884</td>\n","      <td>0.003236</td>\n","      <td>0.002353</td>\n","      <td>0.002046</td>\n","      <td>0.001691</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>0.002450</td>\n","      <td>0.002344</td>\n","      <td>0.001862</td>\n","      <td>0.001983</td>\n","      <td>0.001408</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>0.002186</td>\n","      <td>0.002580</td>\n","      <td>0.002013</td>\n","      <td>0.002096</td>\n","      <td>0.001373</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13214 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8cd0c1a-3d77-4c87-befd-f24e292d97a2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f8cd0c1a-3d77-4c87-befd-f24e292d97a2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f8cd0c1a-3d77-4c87-befd-f24e292d97a2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["            return_a5  return_a10\n","Date                             \n","1971-02-05   0.020500   -0.003200\n","1971-02-08   0.013388   -0.011107\n","1971-02-09   0.009726   -0.001191\n","1971-02-10   0.007250    0.005363\n","1971-02-11  -0.007393   -0.001084\n","...               ...         ...\n","2023-06-23        NaN         NaN\n","2023-06-26        NaN         NaN\n","2023-06-27        NaN         NaN\n","2023-06-28        NaN         NaN\n","2023-06-29        NaN         NaN\n","\n","[13214 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-f042cf9c-0808-467a-b455-cbdf254ba2d7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_a5</th>\n","      <th>return_a10</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>0.020500</td>\n","      <td>-0.003200</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>0.013388</td>\n","      <td>-0.011107</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>0.009726</td>\n","      <td>-0.001191</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>0.007250</td>\n","      <td>0.005363</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>-0.007393</td>\n","      <td>-0.001084</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13214 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f042cf9c-0808-467a-b455-cbdf254ba2d7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f042cf9c-0808-467a-b455-cbdf254ba2d7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f042cf9c-0808-467a-b455-cbdf254ba2d7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":19}],"source":["# window size만큼 과거 대비 수익률, future 만큼 미래 수익률\n","train_df, test_df = cal_return(nasdaq, window_sizes, future_window)\n","\n","display(train_df)\n","test_df"]},{"cell_type":"markdown","metadata":{"id":"UaH5lsuMt2Yi"},"source":["### volume data"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"00FzndsWt2kS","outputId":"614dc012-d937-41b3-bc7a-f9abe677ea01","executionInfo":{"status":"ok","timestamp":1688131770878,"user_tz":-540,"elapsed":39,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            vol_z100  vol_z200\n","Date                          \n","1971-02-05       NaN       NaN\n","1971-02-08       NaN       NaN\n","1971-02-09       NaN       NaN\n","1971-02-10       NaN       NaN\n","1971-02-11       NaN       NaN\n","...              ...       ...\n","2023-06-23  0.281895  0.385380\n","2023-06-26  0.242672  0.329543\n","2023-06-27  0.077388  0.142052\n","2023-06-28 -0.597521 -0.535667\n","2023-06-29 -0.579692 -0.537987\n","\n","[13214 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-c871864f-3d6e-46d8-9815-020c761d8a7d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>0.281895</td>\n","      <td>0.385380</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>0.242672</td>\n","      <td>0.329543</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>0.077388</td>\n","      <td>0.142052</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13214 rows × 2 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c871864f-3d6e-46d8-9815-020c761d8a7d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c871864f-3d6e-46d8-9815-020c761d8a7d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c871864f-3d6e-46d8-9815-020c761d8a7d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}],"source":["scale = [100, 200] # 이동평균 날짜 길이\n","vol_len = 5 # z-score 분자 데이터 이동평균할 날짜 길이\n","# scale 이동평균 대비 거래량 z-score 구하기\n","nasdaq_vol_df = vol_zscore(nasdaq, vol_len, scale)\n","nasdaq_vol_df"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"E7WkCw2UuScy","outputId":"8dc68134-214f-45a8-cc97-6f765cdef506","executionInfo":{"status":"ok","timestamp":1688131770879,"user_tz":-540,"elapsed":38,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","1971-02-05         NaN         NaN         NaN         NaN          NaN   \n","1971-02-08         NaN         NaN         NaN         NaN          NaN   \n","1971-02-09         NaN         NaN         NaN         NaN          NaN   \n","1971-02-10         NaN         NaN         NaN         NaN          NaN   \n","1971-02-11         NaN         NaN         NaN         NaN          NaN   \n","...                ...         ...         ...         ...          ...   \n","2023-06-23    0.003884    0.003236    0.002353    0.002046     0.001691   \n","2023-06-26    0.002450    0.002344    0.001862    0.001983     0.001408   \n","2023-06-27    0.002186    0.002580    0.002013    0.002096     0.001373   \n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080   \n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","1971-02-05       NaN       NaN  \n","1971-02-08       NaN       NaN  \n","1971-02-09       NaN       NaN  \n","1971-02-10       NaN       NaN  \n","1971-02-11       NaN       NaN  \n","...              ...       ...  \n","2023-06-23  0.281895  0.385380  \n","2023-06-26  0.242672  0.329543  \n","2023-06-27  0.077388  0.142052  \n","2023-06-28 -0.597521 -0.535667  \n","2023-06-29 -0.579692 -0.537987  \n","\n","[13214 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-c2a7704a-7169-49e6-b08b-a8d07be2ecf7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1971-02-05</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-08</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-09</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-10</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1971-02-11</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>0.003884</td>\n","      <td>0.003236</td>\n","      <td>0.002353</td>\n","      <td>0.002046</td>\n","      <td>0.001691</td>\n","      <td>0.281895</td>\n","      <td>0.385380</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>0.002450</td>\n","      <td>0.002344</td>\n","      <td>0.001862</td>\n","      <td>0.001983</td>\n","      <td>0.001408</td>\n","      <td>0.242672</td>\n","      <td>0.329543</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>0.002186</td>\n","      <td>0.002580</td>\n","      <td>0.002013</td>\n","      <td>0.002096</td>\n","      <td>0.001373</td>\n","      <td>0.077388</td>\n","      <td>0.142052</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>13214 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2a7704a-7169-49e6-b08b-a8d07be2ecf7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c2a7704a-7169-49e6-b08b-a8d07be2ecf7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c2a7704a-7169-49e6-b08b-a8d07be2ecf7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}],"source":["# train_df에 거래량 feature도 추가\n","train_df = pd.merge(train_df, nasdaq_vol_df, left_index=True, right_index=True)\n","train_df"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"AamEH0H0uTN3","outputId":"759ab91a-0fa5-473c-bdc4-3e43323eeb9d","executionInfo":{"status":"ok","timestamp":1688131770880,"user_tz":-540,"elapsed":34,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["            return_b20  return_b40  return_b60  return_b80  return_b100  \\\n","Date                                                                      \n","2003-06-30    0.000997    0.001919    0.002502    0.002745     0.002206   \n","2003-07-01    0.001127    0.002166    0.002836    0.002854     0.002311   \n","2003-07-02    0.001330    0.002422    0.003151    0.003406     0.002692   \n","2003-07-03    0.000527    0.002473    0.003078    0.003359     0.002491   \n","2003-07-07    0.002787    0.003604    0.003961    0.003706     0.002839   \n","...                ...         ...         ...         ...          ...   \n","2023-06-23    0.003884    0.003236    0.002353    0.002046     0.001691   \n","2023-06-26    0.002450    0.002344    0.001862    0.001983     0.001408   \n","2023-06-27    0.002186    0.002580    0.002013    0.002096     0.001373   \n","2023-06-28    0.002159    0.002675    0.001771    0.001885     0.001080   \n","2023-06-29    0.002474    0.002946    0.001814    0.001899     0.001239   \n","\n","            vol_z100  vol_z200  \n","Date                            \n","2003-06-30 -0.160730 -0.091690  \n","2003-07-01 -0.176253 -0.098838  \n","2003-07-02  0.241040  0.351538  \n","2003-07-03  0.245853  0.356586  \n","2003-07-07  0.467229  0.602078  \n","...              ...       ...  \n","2023-06-23  0.281895  0.385380  \n","2023-06-26  0.242672  0.329543  \n","2023-06-27  0.077388  0.142052  \n","2023-06-28 -0.597521 -0.535667  \n","2023-06-29 -0.579692 -0.537987  \n","\n","[5035 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-a7228e83-160e-4d0c-afd8-f6e6c8aeb3ee\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_b20</th>\n","      <th>return_b40</th>\n","      <th>return_b60</th>\n","      <th>return_b80</th>\n","      <th>return_b100</th>\n","      <th>vol_z100</th>\n","      <th>vol_z200</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2003-06-30</th>\n","      <td>0.000997</td>\n","      <td>0.001919</td>\n","      <td>0.002502</td>\n","      <td>0.002745</td>\n","      <td>0.002206</td>\n","      <td>-0.160730</td>\n","      <td>-0.091690</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-01</th>\n","      <td>0.001127</td>\n","      <td>0.002166</td>\n","      <td>0.002836</td>\n","      <td>0.002854</td>\n","      <td>0.002311</td>\n","      <td>-0.176253</td>\n","      <td>-0.098838</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-02</th>\n","      <td>0.001330</td>\n","      <td>0.002422</td>\n","      <td>0.003151</td>\n","      <td>0.003406</td>\n","      <td>0.002692</td>\n","      <td>0.241040</td>\n","      <td>0.351538</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-03</th>\n","      <td>0.000527</td>\n","      <td>0.002473</td>\n","      <td>0.003078</td>\n","      <td>0.003359</td>\n","      <td>0.002491</td>\n","      <td>0.245853</td>\n","      <td>0.356586</td>\n","    </tr>\n","    <tr>\n","      <th>2003-07-07</th>\n","      <td>0.002787</td>\n","      <td>0.003604</td>\n","      <td>0.003961</td>\n","      <td>0.003706</td>\n","      <td>0.002839</td>\n","      <td>0.467229</td>\n","      <td>0.602078</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-23</th>\n","      <td>0.003884</td>\n","      <td>0.003236</td>\n","      <td>0.002353</td>\n","      <td>0.002046</td>\n","      <td>0.001691</td>\n","      <td>0.281895</td>\n","      <td>0.385380</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-26</th>\n","      <td>0.002450</td>\n","      <td>0.002344</td>\n","      <td>0.001862</td>\n","      <td>0.001983</td>\n","      <td>0.001408</td>\n","      <td>0.242672</td>\n","      <td>0.329543</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-27</th>\n","      <td>0.002186</td>\n","      <td>0.002580</td>\n","      <td>0.002013</td>\n","      <td>0.002096</td>\n","      <td>0.001373</td>\n","      <td>0.077388</td>\n","      <td>0.142052</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-28</th>\n","      <td>0.002159</td>\n","      <td>0.002675</td>\n","      <td>0.001771</td>\n","      <td>0.001885</td>\n","      <td>0.001080</td>\n","      <td>-0.597521</td>\n","      <td>-0.535667</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-29</th>\n","      <td>0.002474</td>\n","      <td>0.002946</td>\n","      <td>0.001814</td>\n","      <td>0.001899</td>\n","      <td>0.001239</td>\n","      <td>-0.579692</td>\n","      <td>-0.537987</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5035 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7228e83-160e-4d0c-afd8-f6e6c8aeb3ee')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a7228e83-160e-4d0c-afd8-f6e6c8aeb3ee button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a7228e83-160e-4d0c-afd8-f6e6c8aeb3ee');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}],"source":["# 최근 20년 데이터만 추출\n","train_20df = train_df[year:]\n","\n","train_20df"]},{"cell_type":"markdown","metadata":{"id":"KlClwKxNuTXR"},"source":["## backtest"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"xUac4_NGuv08","outputId":"b37169a1-5791-4389-d037-71f334e95dd8","executionInfo":{"status":"ok","timestamp":1688132218606,"user_tz":-540,"elapsed":447759,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["your target date 2015-01-01 00:00:00 is not in index\n","your target date 2015-01-03 00:00:00 is not in index\n","your target date 2015-01-04 00:00:00 is not in index\n","your target date 2015-01-10 00:00:00 is not in index\n","your target date 2015-01-11 00:00:00 is not in index\n","your target date 2015-01-17 00:00:00 is not in index\n","your target date 2015-01-18 00:00:00 is not in index\n","your target date 2015-01-19 00:00:00 is not in index\n","your target date 2015-01-24 00:00:00 is not in index\n","your target date 2015-01-25 00:00:00 is not in index\n","your target date 2015-01-31 00:00:00 is not in index\n","your target date 2015-02-01 00:00:00 is not in index\n","your target date 2015-02-07 00:00:00 is not in index\n","your target date 2015-02-08 00:00:00 is not in index\n","your target date 2015-02-14 00:00:00 is not in index\n","your target date 2015-02-15 00:00:00 is not in index\n","your target date 2015-02-16 00:00:00 is not in index\n","your target date 2015-02-21 00:00:00 is not in index\n","your target date 2015-02-22 00:00:00 is not in index\n","your target date 2015-02-28 00:00:00 is not in index\n","your target date 2015-03-01 00:00:00 is not in index\n","your target date 2015-03-07 00:00:00 is not in index\n","your target date 2015-03-08 00:00:00 is not in index\n","your target date 2015-03-14 00:00:00 is not in index\n","your target date 2015-03-15 00:00:00 is not in index\n","your target date 2015-03-21 00:00:00 is not in index\n","your target date 2015-03-22 00:00:00 is not in index\n","your target date 2015-03-28 00:00:00 is not in index\n","your target date 2015-03-29 00:00:00 is not in index\n","your target date 2015-04-03 00:00:00 is not in index\n","your target date 2015-04-04 00:00:00 is not in index\n","your target date 2015-04-05 00:00:00 is not in index\n","your target date 2015-04-11 00:00:00 is not in index\n","your target date 2015-04-12 00:00:00 is not in index\n","your target date 2015-04-18 00:00:00 is not in index\n","your target date 2015-04-19 00:00:00 is not in index\n","your target date 2015-04-25 00:00:00 is not in index\n","your target date 2015-04-26 00:00:00 is not in index\n","your target date 2015-05-02 00:00:00 is not in index\n","your target date 2015-05-03 00:00:00 is not in index\n","your target date 2015-05-09 00:00:00 is not in index\n","your target date 2015-05-10 00:00:00 is not in index\n","your target date 2015-05-16 00:00:00 is not in index\n","your target date 2015-05-17 00:00:00 is not in index\n","your target date 2015-05-23 00:00:00 is not in index\n","your target date 2015-05-24 00:00:00 is not in index\n","your target date 2015-05-25 00:00:00 is not in index\n","your target date 2015-05-30 00:00:00 is not in index\n","your target date 2015-05-31 00:00:00 is not in index\n","your target date 2015-06-06 00:00:00 is not in index\n","your target date 2015-06-07 00:00:00 is not in index\n","your target date 2015-06-13 00:00:00 is not in index\n","your target date 2015-06-14 00:00:00 is not in index\n","your target date 2015-06-20 00:00:00 is not in index\n","your target date 2015-06-21 00:00:00 is not in index\n","your target date 2015-06-27 00:00:00 is not in index\n","your target date 2015-06-28 00:00:00 is not in index\n","your target date 2015-07-03 00:00:00 is not in index\n","your target date 2015-07-04 00:00:00 is not in index\n","your target date 2015-07-05 00:00:00 is not in index\n","your target date 2015-07-11 00:00:00 is not in index\n","your target date 2015-07-12 00:00:00 is not in index\n","your target date 2015-07-18 00:00:00 is not in index\n","your target date 2015-07-19 00:00:00 is not in index\n","your target date 2015-07-25 00:00:00 is not in index\n","your target date 2015-07-26 00:00:00 is not in index\n","your target date 2015-08-01 00:00:00 is not in index\n","your target date 2015-08-02 00:00:00 is not in index\n","your target date 2015-08-08 00:00:00 is not in index\n","your target date 2015-08-09 00:00:00 is not in index\n","your target date 2015-08-15 00:00:00 is not in index\n","your target date 2015-08-16 00:00:00 is not in index\n","your target date 2015-08-22 00:00:00 is not in index\n","your target date 2015-08-23 00:00:00 is not in index\n","your target date 2015-08-29 00:00:00 is not in index\n","your target date 2015-08-30 00:00:00 is not in index\n","your target date 2015-09-05 00:00:00 is not in index\n","your target date 2015-09-06 00:00:00 is not in index\n","your target date 2015-09-07 00:00:00 is not in index\n","your target date 2015-09-12 00:00:00 is not in index\n","your target date 2015-09-13 00:00:00 is not in index\n","your target date 2015-09-19 00:00:00 is not in index\n","your target date 2015-09-20 00:00:00 is not in index\n","your target date 2015-09-26 00:00:00 is not in index\n","your target date 2015-09-27 00:00:00 is not in index\n","your target date 2015-10-03 00:00:00 is not in index\n","your target date 2015-10-04 00:00:00 is not in index\n","your target date 2015-10-10 00:00:00 is not in index\n","your target date 2015-10-11 00:00:00 is not in index\n","your target date 2015-10-17 00:00:00 is not in index\n","your target date 2015-10-18 00:00:00 is not in index\n","your target date 2015-10-24 00:00:00 is not in index\n","your target date 2015-10-25 00:00:00 is not in index\n","your target date 2015-10-31 00:00:00 is not in index\n","your target date 2015-11-01 00:00:00 is not in index\n","your target date 2015-11-07 00:00:00 is not in index\n","your target date 2015-11-08 00:00:00 is not in index\n","your target date 2015-11-14 00:00:00 is not in index\n","your target date 2015-11-15 00:00:00 is not in index\n","your target date 2015-11-21 00:00:00 is not in index\n","your target date 2015-11-22 00:00:00 is not in index\n","your target date 2015-11-26 00:00:00 is not in index\n","your target date 2015-11-28 00:00:00 is not in index\n","your target date 2015-11-29 00:00:00 is not in index\n","your target date 2015-12-05 00:00:00 is not in index\n","your target date 2015-12-06 00:00:00 is not in index\n","your target date 2015-12-12 00:00:00 is not in index\n","your target date 2015-12-13 00:00:00 is not in index\n","your target date 2015-12-19 00:00:00 is not in index\n","your target date 2015-12-20 00:00:00 is not in index\n","your target date 2015-12-25 00:00:00 is not in index\n","your target date 2015-12-26 00:00:00 is not in index\n","your target date 2015-12-27 00:00:00 is not in index\n","your target date 2016-01-01 00:00:00 is not in index\n","your target date 2016-01-02 00:00:00 is not in index\n","your target date 2016-01-03 00:00:00 is not in index\n","your target date 2016-01-09 00:00:00 is not in index\n","your target date 2016-01-10 00:00:00 is not in index\n","your target date 2016-01-16 00:00:00 is not in index\n","your target date 2016-01-17 00:00:00 is not in index\n","your target date 2016-01-18 00:00:00 is not in index\n","your target date 2016-01-23 00:00:00 is not in index\n","your target date 2016-01-24 00:00:00 is not in index\n","your target date 2016-01-30 00:00:00 is not in index\n","your target date 2016-01-31 00:00:00 is not in index\n","your target date 2016-02-06 00:00:00 is not in index\n","your target date 2016-02-07 00:00:00 is not in index\n","your target date 2016-02-13 00:00:00 is not in index\n","your target date 2016-02-14 00:00:00 is not in index\n","your target date 2016-02-15 00:00:00 is not in index\n","your target date 2016-02-20 00:00:00 is not in index\n","your target date 2016-02-21 00:00:00 is not in index\n","your target date 2016-02-27 00:00:00 is not in index\n","your target date 2016-02-28 00:00:00 is not in index\n","your target date 2016-03-05 00:00:00 is not in index\n","your target date 2016-03-06 00:00:00 is not in index\n","your target date 2016-03-12 00:00:00 is not in index\n","your target date 2016-03-13 00:00:00 is not in index\n","your target date 2016-03-19 00:00:00 is not in index\n","your target date 2016-03-20 00:00:00 is not in index\n","your target date 2016-03-25 00:00:00 is not in index\n","your target date 2016-03-26 00:00:00 is not in index\n","your target date 2016-03-27 00:00:00 is not in index\n","your target date 2016-04-02 00:00:00 is not in index\n","your target date 2016-04-03 00:00:00 is not in index\n","your target date 2016-04-09 00:00:00 is not in index\n","your target date 2016-04-10 00:00:00 is not in index\n","your target date 2016-04-16 00:00:00 is not in index\n","your target date 2016-04-17 00:00:00 is not in index\n","your target date 2016-04-23 00:00:00 is not in index\n","your target date 2016-04-24 00:00:00 is not in index\n","your target date 2016-04-30 00:00:00 is not in index\n","your target date 2016-05-01 00:00:00 is not in index\n","your target date 2016-05-07 00:00:00 is not in index\n","your target date 2016-05-08 00:00:00 is not in index\n","your target date 2016-05-14 00:00:00 is not in index\n","your target date 2016-05-15 00:00:00 is not in index\n","your target date 2016-05-21 00:00:00 is not in index\n","your target date 2016-05-22 00:00:00 is not in index\n","your target date 2016-05-28 00:00:00 is not in index\n","your target date 2016-05-29 00:00:00 is not in index\n","your target date 2016-05-30 00:00:00 is not in index\n","your target date 2016-06-04 00:00:00 is not in index\n","your target date 2016-06-05 00:00:00 is not in index\n","your target date 2016-06-11 00:00:00 is not in index\n","your target date 2016-06-12 00:00:00 is not in index\n","your target date 2016-06-18 00:00:00 is not in index\n","your target date 2016-06-19 00:00:00 is not in index\n","your target date 2016-06-25 00:00:00 is not in index\n","your target date 2016-06-26 00:00:00 is not in index\n","your target date 2016-07-02 00:00:00 is not in index\n","your target date 2016-07-03 00:00:00 is not in index\n","your target date 2016-07-04 00:00:00 is not in index\n","your target date 2016-07-09 00:00:00 is not in index\n","your target date 2016-07-10 00:00:00 is not in index\n","your target date 2016-07-16 00:00:00 is not in index\n","your target date 2016-07-17 00:00:00 is not in index\n","your target date 2016-07-23 00:00:00 is not in index\n","your target date 2016-07-24 00:00:00 is not in index\n","your target date 2016-07-30 00:00:00 is not in index\n","your target date 2016-07-31 00:00:00 is not in index\n","your target date 2016-08-06 00:00:00 is not in index\n","your target date 2016-08-07 00:00:00 is not in index\n","your target date 2016-08-13 00:00:00 is not in index\n","your target date 2016-08-14 00:00:00 is not in index\n","your target date 2016-08-20 00:00:00 is not in index\n","your target date 2016-08-21 00:00:00 is not in index\n","your target date 2016-08-27 00:00:00 is not in index\n","your target date 2016-08-28 00:00:00 is not in index\n","your target date 2016-09-03 00:00:00 is not in index\n","your target date 2016-09-04 00:00:00 is not in index\n","your target date 2016-09-05 00:00:00 is not in index\n","your target date 2016-09-10 00:00:00 is not in index\n","your target date 2016-09-11 00:00:00 is not in index\n","your target date 2016-09-17 00:00:00 is not in index\n","your target date 2016-09-18 00:00:00 is not in index\n","your target date 2016-09-24 00:00:00 is not in index\n","your target date 2016-09-25 00:00:00 is not in index\n","your target date 2016-10-01 00:00:00 is not in index\n","your target date 2016-10-02 00:00:00 is not in index\n","your target date 2016-10-08 00:00:00 is not in index\n","your target date 2016-10-09 00:00:00 is not in index\n","your target date 2016-10-15 00:00:00 is not in index\n","your target date 2016-10-16 00:00:00 is not in index\n","your target date 2016-10-22 00:00:00 is not in index\n","your target date 2016-10-23 00:00:00 is not in index\n","your target date 2016-10-29 00:00:00 is not in index\n","your target date 2016-10-30 00:00:00 is not in index\n","your target date 2016-11-05 00:00:00 is not in index\n","your target date 2016-11-06 00:00:00 is not in index\n","your target date 2016-11-12 00:00:00 is not in index\n","your target date 2016-11-13 00:00:00 is not in index\n","your target date 2016-11-19 00:00:00 is not in index\n","your target date 2016-11-20 00:00:00 is not in index\n","your target date 2016-11-24 00:00:00 is not in index\n","your target date 2016-11-26 00:00:00 is not in index\n","your target date 2016-11-27 00:00:00 is not in index\n","your target date 2016-12-03 00:00:00 is not in index\n","your target date 2016-12-04 00:00:00 is not in index\n","your target date 2016-12-10 00:00:00 is not in index\n","your target date 2016-12-11 00:00:00 is not in index\n","your target date 2016-12-17 00:00:00 is not in index\n","your target date 2016-12-18 00:00:00 is not in index\n","your target date 2016-12-24 00:00:00 is not in index\n","your target date 2016-12-25 00:00:00 is not in index\n","your target date 2016-12-26 00:00:00 is not in index\n","your target date 2016-12-31 00:00:00 is not in index\n","your target date 2017-01-01 00:00:00 is not in index\n","your target date 2017-01-02 00:00:00 is not in index\n","your target date 2017-01-07 00:00:00 is not in index\n","your target date 2017-01-08 00:00:00 is not in index\n","your target date 2017-01-14 00:00:00 is not in index\n","your target date 2017-01-15 00:00:00 is not in index\n","your target date 2017-01-16 00:00:00 is not in index\n","your target date 2017-01-21 00:00:00 is not in index\n","your target date 2017-01-22 00:00:00 is not in index\n","your target date 2017-01-28 00:00:00 is not in index\n","your target date 2017-01-29 00:00:00 is not in index\n","your target date 2017-02-04 00:00:00 is not in index\n","your target date 2017-02-05 00:00:00 is not in index\n","your target date 2017-02-11 00:00:00 is not in index\n","your target date 2017-02-12 00:00:00 is not in index\n","your target date 2017-02-18 00:00:00 is not in index\n","your target date 2017-02-19 00:00:00 is not in index\n","your target date 2017-02-20 00:00:00 is not in index\n","your target date 2017-02-25 00:00:00 is not in index\n","your target date 2017-02-26 00:00:00 is not in index\n","your target date 2017-03-04 00:00:00 is not in index\n","your target date 2017-03-05 00:00:00 is not in index\n","your target date 2017-03-11 00:00:00 is not in index\n","your target date 2017-03-12 00:00:00 is not in index\n","your target date 2017-03-18 00:00:00 is not in index\n","your target date 2017-03-19 00:00:00 is not in index\n","your target date 2017-03-25 00:00:00 is not in index\n","your target date 2017-03-26 00:00:00 is not in index\n","your target date 2017-04-01 00:00:00 is not in index\n","your target date 2017-04-02 00:00:00 is not in index\n","your target date 2017-04-08 00:00:00 is not in index\n","your target date 2017-04-09 00:00:00 is not in index\n","your target date 2017-04-14 00:00:00 is not in index\n","your target date 2017-04-15 00:00:00 is not in index\n","your target date 2017-04-16 00:00:00 is not in index\n","your target date 2017-04-22 00:00:00 is not in index\n","your target date 2017-04-23 00:00:00 is not in index\n","your target date 2017-04-29 00:00:00 is not in index\n","your target date 2017-04-30 00:00:00 is not in index\n","your target date 2017-05-06 00:00:00 is not in index\n","your target date 2017-05-07 00:00:00 is not in index\n","your target date 2017-05-13 00:00:00 is not in index\n","your target date 2017-05-14 00:00:00 is not in index\n","your target date 2017-05-20 00:00:00 is not in index\n","your target date 2017-05-21 00:00:00 is not in index\n","your target date 2017-05-27 00:00:00 is not in index\n","your target date 2017-05-28 00:00:00 is not in index\n","your target date 2017-05-29 00:00:00 is not in index\n","your target date 2017-06-03 00:00:00 is not in index\n","your target date 2017-06-04 00:00:00 is not in index\n","your target date 2017-06-10 00:00:00 is not in index\n","your target date 2017-06-11 00:00:00 is not in index\n","your target date 2017-06-17 00:00:00 is not in index\n","your target date 2017-06-18 00:00:00 is not in index\n","your target date 2017-06-24 00:00:00 is not in index\n","your target date 2017-06-25 00:00:00 is not in index\n","your target date 2017-07-01 00:00:00 is not in index\n","your target date 2017-07-02 00:00:00 is not in index\n","your target date 2017-07-04 00:00:00 is not in index\n","your target date 2017-07-08 00:00:00 is not in index\n","your target date 2017-07-09 00:00:00 is not in index\n","your target date 2017-07-15 00:00:00 is not in index\n","your target date 2017-07-16 00:00:00 is not in index\n","your target date 2017-07-22 00:00:00 is not in index\n","your target date 2017-07-23 00:00:00 is not in index\n","your target date 2017-07-29 00:00:00 is not in index\n","your target date 2017-07-30 00:00:00 is not in index\n","your target date 2017-08-05 00:00:00 is not in index\n","your target date 2017-08-06 00:00:00 is not in index\n","your target date 2017-08-12 00:00:00 is not in index\n","your target date 2017-08-13 00:00:00 is not in index\n","your target date 2017-08-19 00:00:00 is not in index\n","your target date 2017-08-20 00:00:00 is not in index\n","your target date 2017-08-26 00:00:00 is not in index\n","your target date 2017-08-27 00:00:00 is not in index\n","your target date 2017-09-02 00:00:00 is not in index\n","your target date 2017-09-03 00:00:00 is not in index\n","your target date 2017-09-04 00:00:00 is not in index\n","your target date 2017-09-09 00:00:00 is not in index\n","your target date 2017-09-10 00:00:00 is not in index\n","your target date 2017-09-16 00:00:00 is not in index\n","your target date 2017-09-17 00:00:00 is not in index\n","your target date 2017-09-23 00:00:00 is not in index\n","your target date 2017-09-24 00:00:00 is not in index\n","your target date 2017-09-30 00:00:00 is not in index\n","your target date 2017-10-01 00:00:00 is not in index\n","your target date 2017-10-07 00:00:00 is not in index\n","your target date 2017-10-08 00:00:00 is not in index\n","your target date 2017-10-14 00:00:00 is not in index\n","your target date 2017-10-15 00:00:00 is not in index\n","your target date 2017-10-21 00:00:00 is not in index\n","your target date 2017-10-22 00:00:00 is not in index\n","your target date 2017-10-28 00:00:00 is not in index\n","your target date 2017-10-29 00:00:00 is not in index\n","your target date 2017-11-04 00:00:00 is not in index\n","your target date 2017-11-05 00:00:00 is not in index\n","your target date 2017-11-11 00:00:00 is not in index\n","your target date 2017-11-12 00:00:00 is not in index\n","your target date 2017-11-18 00:00:00 is not in index\n","your target date 2017-11-19 00:00:00 is not in index\n","your target date 2017-11-23 00:00:00 is not in index\n","your target date 2017-11-25 00:00:00 is not in index\n","your target date 2017-11-26 00:00:00 is not in index\n","your target date 2017-12-02 00:00:00 is not in index\n","your target date 2017-12-03 00:00:00 is not in index\n","your target date 2017-12-09 00:00:00 is not in index\n","your target date 2017-12-10 00:00:00 is not in index\n","your target date 2017-12-16 00:00:00 is not in index\n","your target date 2017-12-17 00:00:00 is not in index\n","your target date 2017-12-23 00:00:00 is not in index\n","your target date 2017-12-24 00:00:00 is not in index\n","your target date 2017-12-25 00:00:00 is not in index\n","your target date 2017-12-30 00:00:00 is not in index\n","your target date 2017-12-31 00:00:00 is not in index\n","your target date 2018-01-01 00:00:00 is not in index\n"]},{"output_type":"execute_result","data":{"text/plain":["            return_5    mean_5     std_5 return_10   mean_10    std_10\n","2014-12-31   0.00003  0.002921  0.036456 -0.034888  0.005252   0.03143\n","2015-01-02 -0.004811  0.003886  0.030958 -0.019554  0.000978  0.027122\n","2015-01-05  0.002609   0.01232   0.01953   0.00049  0.021479  0.020471\n","2015-01-06  0.014971  0.010545  0.026537   0.01626  0.015378  0.017321\n","2015-01-07 -0.002398  0.004344  0.032429  0.021488  0.004201  0.016579\n","...              ...       ...       ...       ...       ...       ...\n","2017-12-26  0.018638 -0.006629  0.053454  0.031331 -0.007314  0.030155\n","2017-12-27  0.019969  0.004825   0.03937   0.03926  0.009807  0.032982\n","2017-12-28   0.02682 -0.003848  0.043439  0.044733 -0.004483   0.02846\n","2017-12-29  0.036794 -0.002639  0.044024  0.046397 -0.003856  0.028979\n","2018-01-02  0.022361 -0.001715  0.044775  0.041585 -0.002977  0.029796\n","\n","[757 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-d993d5bb-814f-4927-8f11-662a65eeefb3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_5</th>\n","      <th>mean_5</th>\n","      <th>std_5</th>\n","      <th>return_10</th>\n","      <th>mean_10</th>\n","      <th>std_10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2014-12-31</th>\n","      <td>0.00003</td>\n","      <td>0.002921</td>\n","      <td>0.036456</td>\n","      <td>-0.034888</td>\n","      <td>0.005252</td>\n","      <td>0.03143</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-02</th>\n","      <td>-0.004811</td>\n","      <td>0.003886</td>\n","      <td>0.030958</td>\n","      <td>-0.019554</td>\n","      <td>0.000978</td>\n","      <td>0.027122</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-05</th>\n","      <td>0.002609</td>\n","      <td>0.01232</td>\n","      <td>0.01953</td>\n","      <td>0.00049</td>\n","      <td>0.021479</td>\n","      <td>0.020471</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-06</th>\n","      <td>0.014971</td>\n","      <td>0.010545</td>\n","      <td>0.026537</td>\n","      <td>0.01626</td>\n","      <td>0.015378</td>\n","      <td>0.017321</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-07</th>\n","      <td>-0.002398</td>\n","      <td>0.004344</td>\n","      <td>0.032429</td>\n","      <td>0.021488</td>\n","      <td>0.004201</td>\n","      <td>0.016579</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-26</th>\n","      <td>0.018638</td>\n","      <td>-0.006629</td>\n","      <td>0.053454</td>\n","      <td>0.031331</td>\n","      <td>-0.007314</td>\n","      <td>0.030155</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-27</th>\n","      <td>0.019969</td>\n","      <td>0.004825</td>\n","      <td>0.03937</td>\n","      <td>0.03926</td>\n","      <td>0.009807</td>\n","      <td>0.032982</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-28</th>\n","      <td>0.02682</td>\n","      <td>-0.003848</td>\n","      <td>0.043439</td>\n","      <td>0.044733</td>\n","      <td>-0.004483</td>\n","      <td>0.02846</td>\n","    </tr>\n","    <tr>\n","      <th>2017-12-29</th>\n","      <td>0.036794</td>\n","      <td>-0.002639</td>\n","      <td>0.044024</td>\n","      <td>0.046397</td>\n","      <td>-0.003856</td>\n","      <td>0.028979</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.022361</td>\n","      <td>-0.001715</td>\n","      <td>0.044775</td>\n","      <td>0.041585</td>\n","      <td>-0.002977</td>\n","      <td>0.029796</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>757 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d993d5bb-814f-4927-8f11-662a65eeefb3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d993d5bb-814f-4927-8f11-662a65eeefb3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d993d5bb-814f-4927-8f11-662a65eeefb3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":23}],"source":["# 실제 future_window 이후 수익률, 추출값 future_window만큼 이후 수익률 평균 표준편차 순으로 df 형성 함수\n","backtest_df = calculate_returns('2015-01-01', '2017-12-31', nasdaq, train_20df, future_window)\n","backtest_df"]},{"cell_type":"markdown","metadata":{"id":"bV3C_SDTuwfR"},"source":["## performance evaluation"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qeqBl5RlxDNA","outputId":"9190ba5b-bcc6-4327-a653-ddc9c616c527","executionInfo":{"status":"ok","timestamp":1688132943720,"user_tz":-540,"elapsed":298,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'result_5': {'soso_5': 23,\n","  'large_std_5': 78,\n","  'pos_true_5': 261,\n","  'pos_false_5': 170,\n","  'neg_true_5': 81,\n","  'neg_false_5': 144,\n","  'error_mean': 0.000596312926862217,\n","  'error_std': 0.020783892342196124},\n"," 'result_10': {'soso_10': 75,\n","  'large_std_10': 4,\n","  'pos_true_10': 253,\n","  'pos_false_10': 187,\n","  'neg_true_10': 77,\n","  'neg_false_10': 161,\n","  'error_mean': 0.0014832500879672114,\n","  'error_std': 0.028502674494363982}}"]},"metadata":{},"execution_count":35}],"source":["result = check_result(backtest_df, future_window)\n","result"]},{"cell_type":"markdown","source":["## develop evaluation"],"metadata":{"id":"2aFPREGUm1in"}},{"cell_type":"code","source":["future_window=[5] # 5일 성과가 더 좋아서"],"metadata":{"id":"LflvhVmom0QF","executionInfo":{"status":"ok","timestamp":1688133022735,"user_tz":-540,"elapsed":329,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["develop_test_df = calculate_returns('2018-01-01', '2020-12-31', nasdaq, train_20df, future_window)\n","develop_test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"cXA6LK1-omUY","executionInfo":{"status":"ok","timestamp":1688134149673,"user_tz":-540,"elapsed":537723,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"d33ba81b-c5e4-4867-e9cf-95e3c651552f"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["your target date 2017-12-30 00:00:00 is not in index\n","your target date 2017-12-31 00:00:00 is not in index\n","your target date 2018-01-01 00:00:00 is not in index\n","your target date 2018-01-06 00:00:00 is not in index\n","your target date 2018-01-07 00:00:00 is not in index\n","your target date 2018-01-13 00:00:00 is not in index\n","your target date 2018-01-14 00:00:00 is not in index\n","your target date 2018-01-15 00:00:00 is not in index\n","your target date 2018-01-20 00:00:00 is not in index\n","your target date 2018-01-21 00:00:00 is not in index\n","your target date 2018-01-27 00:00:00 is not in index\n","your target date 2018-01-28 00:00:00 is not in index\n","your target date 2018-02-03 00:00:00 is not in index\n","your target date 2018-02-04 00:00:00 is not in index\n","your target date 2018-02-10 00:00:00 is not in index\n","your target date 2018-02-11 00:00:00 is not in index\n","your target date 2018-02-17 00:00:00 is not in index\n","your target date 2018-02-18 00:00:00 is not in index\n","your target date 2018-02-19 00:00:00 is not in index\n","your target date 2018-02-24 00:00:00 is not in index\n","your target date 2018-02-25 00:00:00 is not in index\n","your target date 2018-03-03 00:00:00 is not in index\n","your target date 2018-03-04 00:00:00 is not in index\n","your target date 2018-03-10 00:00:00 is not in index\n","your target date 2018-03-11 00:00:00 is not in index\n","your target date 2018-03-17 00:00:00 is not in index\n","your target date 2018-03-18 00:00:00 is not in index\n","your target date 2018-03-24 00:00:00 is not in index\n","your target date 2018-03-25 00:00:00 is not in index\n","your target date 2018-03-30 00:00:00 is not in index\n","your target date 2018-03-31 00:00:00 is not in index\n","your target date 2018-04-01 00:00:00 is not in index\n","your target date 2018-04-07 00:00:00 is not in index\n","your target date 2018-04-08 00:00:00 is not in index\n","your target date 2018-04-14 00:00:00 is not in index\n","your target date 2018-04-15 00:00:00 is not in index\n","your target date 2018-04-21 00:00:00 is not in index\n","your target date 2018-04-22 00:00:00 is not in index\n","your target date 2018-04-28 00:00:00 is not in index\n","your target date 2018-04-29 00:00:00 is not in index\n","your target date 2018-05-05 00:00:00 is not in index\n","your target date 2018-05-06 00:00:00 is not in index\n","your target date 2018-05-12 00:00:00 is not in index\n","your target date 2018-05-13 00:00:00 is not in index\n","your target date 2018-05-19 00:00:00 is not in index\n","your target date 2018-05-20 00:00:00 is not in index\n","your target date 2018-05-26 00:00:00 is not in index\n","your target date 2018-05-27 00:00:00 is not in index\n","your target date 2018-05-28 00:00:00 is not in index\n","your target date 2018-06-02 00:00:00 is not in index\n","your target date 2018-06-03 00:00:00 is not in index\n","your target date 2018-06-09 00:00:00 is not in index\n","your target date 2018-06-10 00:00:00 is not in index\n","your target date 2018-06-16 00:00:00 is not in index\n","your target date 2018-06-17 00:00:00 is not in index\n","your target date 2018-06-23 00:00:00 is not in index\n","your target date 2018-06-24 00:00:00 is not in index\n","your target date 2018-06-30 00:00:00 is not in index\n","your target date 2018-07-01 00:00:00 is not in index\n","your target date 2018-07-04 00:00:00 is not in index\n","your target date 2018-07-07 00:00:00 is not in index\n","your target date 2018-07-08 00:00:00 is not in index\n","your target date 2018-07-14 00:00:00 is not in index\n","your target date 2018-07-15 00:00:00 is not in index\n","your target date 2018-07-21 00:00:00 is not in index\n","your target date 2018-07-22 00:00:00 is not in index\n","your target date 2018-07-28 00:00:00 is not in index\n","your target date 2018-07-29 00:00:00 is not in index\n","your target date 2018-08-04 00:00:00 is not in index\n","your target date 2018-08-05 00:00:00 is not in index\n","your target date 2018-08-11 00:00:00 is not in index\n","your target date 2018-08-12 00:00:00 is not in index\n","your target date 2018-08-18 00:00:00 is not in index\n","your target date 2018-08-19 00:00:00 is not in index\n","your target date 2018-08-25 00:00:00 is not in index\n","your target date 2018-08-26 00:00:00 is not in index\n","your target date 2018-09-01 00:00:00 is not in index\n","your target date 2018-09-02 00:00:00 is not in index\n","your target date 2018-09-03 00:00:00 is not in index\n","your target date 2018-09-08 00:00:00 is not in index\n","your target date 2018-09-09 00:00:00 is not in index\n","your target date 2018-09-15 00:00:00 is not in index\n","your target date 2018-09-16 00:00:00 is not in index\n","your target date 2018-09-22 00:00:00 is not in index\n","your target date 2018-09-23 00:00:00 is not in index\n","your target date 2018-09-29 00:00:00 is not in index\n","your target date 2018-09-30 00:00:00 is not in index\n","your target date 2018-10-06 00:00:00 is not in index\n","your target date 2018-10-07 00:00:00 is not in index\n","your target date 2018-10-13 00:00:00 is not in index\n","your target date 2018-10-14 00:00:00 is not in index\n","your target date 2018-10-20 00:00:00 is not in index\n","your target date 2018-10-21 00:00:00 is not in index\n","your target date 2018-10-27 00:00:00 is not in index\n","your target date 2018-10-28 00:00:00 is not in index\n","your target date 2018-11-03 00:00:00 is not in index\n","your target date 2018-11-04 00:00:00 is not in index\n","your target date 2018-11-10 00:00:00 is not in index\n","your target date 2018-11-11 00:00:00 is not in index\n","your target date 2018-11-17 00:00:00 is not in index\n","your target date 2018-11-18 00:00:00 is not in index\n","your target date 2018-11-22 00:00:00 is not in index\n","your target date 2018-11-24 00:00:00 is not in index\n","your target date 2018-11-25 00:00:00 is not in index\n","your target date 2018-12-01 00:00:00 is not in index\n","your target date 2018-12-02 00:00:00 is not in index\n","your target date 2018-12-05 00:00:00 is not in index\n","your target date 2018-12-08 00:00:00 is not in index\n","your target date 2018-12-09 00:00:00 is not in index\n","your target date 2018-12-15 00:00:00 is not in index\n","your target date 2018-12-16 00:00:00 is not in index\n","your target date 2018-12-22 00:00:00 is not in index\n","your target date 2018-12-23 00:00:00 is not in index\n","your target date 2018-12-25 00:00:00 is not in index\n","your target date 2018-12-29 00:00:00 is not in index\n","your target date 2018-12-30 00:00:00 is not in index\n","your target date 2019-01-01 00:00:00 is not in index\n","your target date 2019-01-05 00:00:00 is not in index\n","your target date 2019-01-06 00:00:00 is not in index\n","your target date 2019-01-12 00:00:00 is not in index\n","your target date 2019-01-13 00:00:00 is not in index\n","your target date 2019-01-19 00:00:00 is not in index\n","your target date 2019-01-20 00:00:00 is not in index\n","your target date 2019-01-21 00:00:00 is not in index\n","your target date 2019-01-26 00:00:00 is not in index\n","your target date 2019-01-27 00:00:00 is not in index\n","your target date 2019-02-02 00:00:00 is not in index\n","your target date 2019-02-03 00:00:00 is not in index\n","your target date 2019-02-09 00:00:00 is not in index\n","your target date 2019-02-10 00:00:00 is not in index\n","your target date 2019-02-16 00:00:00 is not in index\n","your target date 2019-02-17 00:00:00 is not in index\n","your target date 2019-02-18 00:00:00 is not in index\n","your target date 2019-02-23 00:00:00 is not in index\n","your target date 2019-02-24 00:00:00 is not in index\n","your target date 2019-03-02 00:00:00 is not in index\n","your target date 2019-03-03 00:00:00 is not in index\n","your target date 2019-03-09 00:00:00 is not in index\n","your target date 2019-03-10 00:00:00 is not in index\n","your target date 2019-03-16 00:00:00 is not in index\n","your target date 2019-03-17 00:00:00 is not in index\n","your target date 2019-03-23 00:00:00 is not in index\n","your target date 2019-03-24 00:00:00 is not in index\n","your target date 2019-03-30 00:00:00 is not in index\n","your target date 2019-03-31 00:00:00 is not in index\n","your target date 2019-04-06 00:00:00 is not in index\n","your target date 2019-04-07 00:00:00 is not in index\n","your target date 2019-04-13 00:00:00 is not in index\n","your target date 2019-04-14 00:00:00 is not in index\n","your target date 2019-04-19 00:00:00 is not in index\n","your target date 2019-04-20 00:00:00 is not in index\n","your target date 2019-04-21 00:00:00 is not in index\n","your target date 2019-04-27 00:00:00 is not in index\n","your target date 2019-04-28 00:00:00 is not in index\n","your target date 2019-05-04 00:00:00 is not in index\n","your target date 2019-05-05 00:00:00 is not in index\n","your target date 2019-05-11 00:00:00 is not in index\n","your target date 2019-05-12 00:00:00 is not in index\n","your target date 2019-05-18 00:00:00 is not in index\n","your target date 2019-05-19 00:00:00 is not in index\n","your target date 2019-05-25 00:00:00 is not in index\n","your target date 2019-05-26 00:00:00 is not in index\n","your target date 2019-05-27 00:00:00 is not in index\n","your target date 2019-06-01 00:00:00 is not in index\n","your target date 2019-06-02 00:00:00 is not in index\n","your target date 2019-06-08 00:00:00 is not in index\n","your target date 2019-06-09 00:00:00 is not in index\n","your target date 2019-06-15 00:00:00 is not in index\n","your target date 2019-06-16 00:00:00 is not in index\n","your target date 2019-06-22 00:00:00 is not in index\n","your target date 2019-06-23 00:00:00 is not in index\n","your target date 2019-06-29 00:00:00 is not in index\n","your target date 2019-06-30 00:00:00 is not in index\n","your target date 2019-07-04 00:00:00 is not in index\n","your target date 2019-07-06 00:00:00 is not in index\n","your target date 2019-07-07 00:00:00 is not in index\n","your target date 2019-07-13 00:00:00 is not in index\n","your target date 2019-07-14 00:00:00 is not in index\n","your target date 2019-07-20 00:00:00 is not in index\n","your target date 2019-07-21 00:00:00 is not in index\n","your target date 2019-07-27 00:00:00 is not in index\n","your target date 2019-07-28 00:00:00 is not in index\n","your target date 2019-08-03 00:00:00 is not in index\n","your target date 2019-08-04 00:00:00 is not in index\n","your target date 2019-08-10 00:00:00 is not in index\n","your target date 2019-08-11 00:00:00 is not in index\n","your target date 2019-08-17 00:00:00 is not in index\n","your target date 2019-08-18 00:00:00 is not in index\n","your target date 2019-08-24 00:00:00 is not in index\n","your target date 2019-08-25 00:00:00 is not in index\n","your target date 2019-08-31 00:00:00 is not in index\n","your target date 2019-09-01 00:00:00 is not in index\n","your target date 2019-09-02 00:00:00 is not in index\n","your target date 2019-09-07 00:00:00 is not in index\n","your target date 2019-09-08 00:00:00 is not in index\n","your target date 2019-09-14 00:00:00 is not in index\n","your target date 2019-09-15 00:00:00 is not in index\n","your target date 2019-09-21 00:00:00 is not in index\n","your target date 2019-09-22 00:00:00 is not in index\n","your target date 2019-09-28 00:00:00 is not in index\n","your target date 2019-09-29 00:00:00 is not in index\n","your target date 2019-10-05 00:00:00 is not in index\n","your target date 2019-10-06 00:00:00 is not in index\n","your target date 2019-10-12 00:00:00 is not in index\n","your target date 2019-10-13 00:00:00 is not in index\n","your target date 2019-10-19 00:00:00 is not in index\n","your target date 2019-10-20 00:00:00 is not in index\n","your target date 2019-10-26 00:00:00 is not in index\n","your target date 2019-10-27 00:00:00 is not in index\n","your target date 2019-11-02 00:00:00 is not in index\n","your target date 2019-11-03 00:00:00 is not in index\n","your target date 2019-11-09 00:00:00 is not in index\n","your target date 2019-11-10 00:00:00 is not in index\n","your target date 2019-11-16 00:00:00 is not in index\n","your target date 2019-11-17 00:00:00 is not in index\n","your target date 2019-11-23 00:00:00 is not in index\n","your target date 2019-11-24 00:00:00 is not in index\n","your target date 2019-11-28 00:00:00 is not in index\n","your target date 2019-11-30 00:00:00 is not in index\n","your target date 2019-12-01 00:00:00 is not in index\n","your target date 2019-12-07 00:00:00 is not in index\n","your target date 2019-12-08 00:00:00 is not in index\n","your target date 2019-12-14 00:00:00 is not in index\n","your target date 2019-12-15 00:00:00 is not in index\n","your target date 2019-12-21 00:00:00 is not in index\n","your target date 2019-12-22 00:00:00 is not in index\n","your target date 2019-12-25 00:00:00 is not in index\n","your target date 2019-12-28 00:00:00 is not in index\n","your target date 2019-12-29 00:00:00 is not in index\n","your target date 2020-01-01 00:00:00 is not in index\n","your target date 2020-01-04 00:00:00 is not in index\n","your target date 2020-01-05 00:00:00 is not in index\n","your target date 2020-01-11 00:00:00 is not in index\n","your target date 2020-01-12 00:00:00 is not in index\n","your target date 2020-01-18 00:00:00 is not in index\n","your target date 2020-01-19 00:00:00 is not in index\n","your target date 2020-01-20 00:00:00 is not in index\n","your target date 2020-01-25 00:00:00 is not in index\n","your target date 2020-01-26 00:00:00 is not in index\n","your target date 2020-02-01 00:00:00 is not in index\n","your target date 2020-02-02 00:00:00 is not in index\n","your target date 2020-02-08 00:00:00 is not in index\n","your target date 2020-02-09 00:00:00 is not in index\n","your target date 2020-02-15 00:00:00 is not in index\n","your target date 2020-02-16 00:00:00 is not in index\n","your target date 2020-02-17 00:00:00 is not in index\n","your target date 2020-02-22 00:00:00 is not in index\n","your target date 2020-02-23 00:00:00 is not in index\n","your target date 2020-02-29 00:00:00 is not in index\n","your target date 2020-03-01 00:00:00 is not in index\n","your target date 2020-03-07 00:00:00 is not in index\n","your target date 2020-03-08 00:00:00 is not in index\n","your target date 2020-03-14 00:00:00 is not in index\n","your target date 2020-03-15 00:00:00 is not in index\n","your target date 2020-03-21 00:00:00 is not in index\n","your target date 2020-03-22 00:00:00 is not in index\n","your target date 2020-03-28 00:00:00 is not in index\n","your target date 2020-03-29 00:00:00 is not in index\n","your target date 2020-04-04 00:00:00 is not in index\n","your target date 2020-04-05 00:00:00 is not in index\n","your target date 2020-04-10 00:00:00 is not in index\n","your target date 2020-04-11 00:00:00 is not in index\n","your target date 2020-04-12 00:00:00 is not in index\n","your target date 2020-04-18 00:00:00 is not in index\n","your target date 2020-04-19 00:00:00 is not in index\n","your target date 2020-04-25 00:00:00 is not in index\n","your target date 2020-04-26 00:00:00 is not in index\n","your target date 2020-05-02 00:00:00 is not in index\n","your target date 2020-05-03 00:00:00 is not in index\n","your target date 2020-05-09 00:00:00 is not in index\n","your target date 2020-05-10 00:00:00 is not in index\n","your target date 2020-05-16 00:00:00 is not in index\n","your target date 2020-05-17 00:00:00 is not in index\n","your target date 2020-05-23 00:00:00 is not in index\n","your target date 2020-05-24 00:00:00 is not in index\n","your target date 2020-05-25 00:00:00 is not in index\n","your target date 2020-05-30 00:00:00 is not in index\n","your target date 2020-05-31 00:00:00 is not in index\n","your target date 2020-06-06 00:00:00 is not in index\n","your target date 2020-06-07 00:00:00 is not in index\n","your target date 2020-06-13 00:00:00 is not in index\n","your target date 2020-06-14 00:00:00 is not in index\n","your target date 2020-06-20 00:00:00 is not in index\n","your target date 2020-06-21 00:00:00 is not in index\n","your target date 2020-06-27 00:00:00 is not in index\n","your target date 2020-06-28 00:00:00 is not in index\n","your target date 2020-07-03 00:00:00 is not in index\n","your target date 2020-07-04 00:00:00 is not in index\n","your target date 2020-07-05 00:00:00 is not in index\n","your target date 2020-07-11 00:00:00 is not in index\n","your target date 2020-07-12 00:00:00 is not in index\n","your target date 2020-07-18 00:00:00 is not in index\n","your target date 2020-07-19 00:00:00 is not in index\n","your target date 2020-07-25 00:00:00 is not in index\n","your target date 2020-07-26 00:00:00 is not in index\n","your target date 2020-08-01 00:00:00 is not in index\n","your target date 2020-08-02 00:00:00 is not in index\n","your target date 2020-08-08 00:00:00 is not in index\n","your target date 2020-08-09 00:00:00 is not in index\n","your target date 2020-08-15 00:00:00 is not in index\n","your target date 2020-08-16 00:00:00 is not in index\n","your target date 2020-08-22 00:00:00 is not in index\n","your target date 2020-08-23 00:00:00 is not in index\n","your target date 2020-08-29 00:00:00 is not in index\n","your target date 2020-08-30 00:00:00 is not in index\n","your target date 2020-09-05 00:00:00 is not in index\n","your target date 2020-09-06 00:00:00 is not in index\n","your target date 2020-09-07 00:00:00 is not in index\n","your target date 2020-09-12 00:00:00 is not in index\n","your target date 2020-09-13 00:00:00 is not in index\n","your target date 2020-09-19 00:00:00 is not in index\n","your target date 2020-09-20 00:00:00 is not in index\n","your target date 2020-09-26 00:00:00 is not in index\n","your target date 2020-09-27 00:00:00 is not in index\n","your target date 2020-10-03 00:00:00 is not in index\n","your target date 2020-10-04 00:00:00 is not in index\n","your target date 2020-10-10 00:00:00 is not in index\n","your target date 2020-10-11 00:00:00 is not in index\n","your target date 2020-10-17 00:00:00 is not in index\n","your target date 2020-10-18 00:00:00 is not in index\n","your target date 2020-10-24 00:00:00 is not in index\n","your target date 2020-10-25 00:00:00 is not in index\n","your target date 2020-10-31 00:00:00 is not in index\n","your target date 2020-11-01 00:00:00 is not in index\n","your target date 2020-11-07 00:00:00 is not in index\n","your target date 2020-11-08 00:00:00 is not in index\n","your target date 2020-11-14 00:00:00 is not in index\n","your target date 2020-11-15 00:00:00 is not in index\n","your target date 2020-11-21 00:00:00 is not in index\n","your target date 2020-11-22 00:00:00 is not in index\n","your target date 2020-11-26 00:00:00 is not in index\n","your target date 2020-11-28 00:00:00 is not in index\n","your target date 2020-11-29 00:00:00 is not in index\n","your target date 2020-12-05 00:00:00 is not in index\n","your target date 2020-12-06 00:00:00 is not in index\n","your target date 2020-12-12 00:00:00 is not in index\n","your target date 2020-12-13 00:00:00 is not in index\n","your target date 2020-12-19 00:00:00 is not in index\n","your target date 2020-12-20 00:00:00 is not in index\n","your target date 2020-12-25 00:00:00 is not in index\n","your target date 2020-12-26 00:00:00 is not in index\n","your target date 2020-12-27 00:00:00 is not in index\n"]},{"output_type":"execute_result","data":{"text/plain":["            return_5    mean_5     std_5\n","2017-12-29  0.036794 -0.002639  0.028979\n","2018-01-02  0.022361 -0.001715  0.029796\n","2018-01-03  0.012461  0.006372  0.014021\n","2018-01-04  0.018914  0.002549   0.01568\n","2018-01-05  0.017445  0.005412  0.027612\n","...              ...       ...       ...\n","2020-12-24   -0.0083  0.003681  0.025403\n","2020-12-28 -0.006237 -0.010527  0.036409\n","2020-12-29 -0.008516 -0.000992  0.020043\n","2020-12-30  0.015344  0.000241  0.019943\n","2020-12-31   0.02434  0.008432  0.021354\n","\n","[757 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-b7541a08-04e0-4b55-b43d-7aa2903d37f8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_5</th>\n","      <th>mean_5</th>\n","      <th>std_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2017-12-29</th>\n","      <td>0.036794</td>\n","      <td>-0.002639</td>\n","      <td>0.028979</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-02</th>\n","      <td>0.022361</td>\n","      <td>-0.001715</td>\n","      <td>0.029796</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-03</th>\n","      <td>0.012461</td>\n","      <td>0.006372</td>\n","      <td>0.014021</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-04</th>\n","      <td>0.018914</td>\n","      <td>0.002549</td>\n","      <td>0.01568</td>\n","    </tr>\n","    <tr>\n","      <th>2018-01-05</th>\n","      <td>0.017445</td>\n","      <td>0.005412</td>\n","      <td>0.027612</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-24</th>\n","      <td>-0.0083</td>\n","      <td>0.003681</td>\n","      <td>0.025403</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-28</th>\n","      <td>-0.006237</td>\n","      <td>-0.010527</td>\n","      <td>0.036409</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-29</th>\n","      <td>-0.008516</td>\n","      <td>-0.000992</td>\n","      <td>0.020043</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-30</th>\n","      <td>0.015344</td>\n","      <td>0.000241</td>\n","      <td>0.019943</td>\n","    </tr>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>0.02434</td>\n","      <td>0.008432</td>\n","      <td>0.021354</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>757 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7541a08-04e0-4b55-b43d-7aa2903d37f8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b7541a08-04e0-4b55-b43d-7aa2903d37f8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b7541a08-04e0-4b55-b43d-7aa2903d37f8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["result = check_result(develop_test_df, future_window)\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8MLAINcaQNAt","executionInfo":{"status":"ok","timestamp":1688136777097,"user_tz":-540,"elapsed":328,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"95ca429a-a8f9-4472-990d-89e647a75ec2"},"execution_count":114,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'result_5': {'soso_5': 104,\n","  'large_std_5': 17,\n","  'pos_true_5': 245,\n","  'pos_false_5': 175,\n","  'neg_true_5': 64,\n","  'neg_false_5': 152,\n","  'error_mean': 0.002064600506976886,\n","  'error_std': 0.031236671291245507}}"]},"metadata":{},"execution_count":114}]},{"cell_type":"code","source":["def buysell_strategy(backtest_df, nasdaq_df, initial_capital):\n","    cash = initial_capital  # 초기 자본 설정\n","    stocks = 0  # 주식 보유량 초기화\n","    portfolio_value = []  # 포트폴리오 가치를 저장할 리스트\n","\n","    # 날짜에 따른 정확한 매칭을 위해 DataFrame의 인덱스를 날짜로 설정\n","    backtest_df.index = pd.to_datetime(backtest_df.index)\n","    nasdaq_df.index = pd.to_datetime(nasdaq_df.index)\n","\n","    for window in future_window:\n","      for date in backtest_df.index:\n","          # date = row.Index  # 현재 날짜 가져오기\n","          if date in nasdaq_df.index:  # 현재 날짜가 nasdaq 데이터에 있을 경우\n","              price = nasdaq_df.loc[date, 'price']  # 해당 날짜의 가격 가져오기\n","              mean_p = backtest_df.loc[date, f'mean_{window}']  # mean 값을 가져오기\n","\n","              # mean_p >= error_std 일 경우, 자본의 %를 매수\n","              if mean_p >= result[f'result_{window}']['error_std']:\n","                  buy_amount = cash * 0.7\n","                  stock_amount = round(buy_amount / price)\n","                  stocks += stock_amount\n","                  cash -= stock_amount * price\n","                  print(\"Date:\",date.date(),\", buy price:\",price)\n","\n","              # mean_p >= error_std/2 일 경우, 자본의 %를 매수\n","              elif mean_p >= (result[f'result_{window}']['error_std']*0.5):\n","                  buy_amount = cash * 0.45\n","                  stock_amount = round(buy_amount / price)\n","                  stocks += stock_amount\n","                  cash -= stock_amount * price\n","                  print(\"Date:\",date.date(),\", buy price:\",price)\n","\n","              # mean_p이 <= -error_std/2 일 경우, 보유 주식의 %를 매도\n","              elif mean_p <= -(result[f'result_{window}']['error_std']*0.5):\n","                  sell_amount = round(stocks * 0.5)\n","                  stocks -= sell_amount\n","                  cash += sell_amount * price\n","                  print(\"Date:\",date.date(),\", sell price:\",price)\n","\n","              # mean_p이 <= -error_std 일 경우, 보유 주식 %를 매도\n","              elif mean_p <= -(result[f'result_{window}']['error_std']):\n","                  sell_amount = round(stocks * 0.75)\n","                  stocks -= sell_amount\n","                  cash += sell_amount * price\n","                  # cash += stocks * price\n","                  # stocks = 0  # 주식 보유량 초기화\n","                  print(\"Date:\",date.date(),\", sell price:\",price)\n","\n","              # 포트폴리오 총 가치 (현금 + 주식 가치) 계산 후 저장\n","              total_value = cash + stocks * price\n","              portfolio_value.append(total_value)\n","\n","    # 백테스팅 종료 시점에 보유 중인 주식 전량 매도\n","    if stocks > 0:\n","        cash += stocks * price\n","        stocks = 0\n","        print(\"Date:\",date.date(),\", final sell price:\",price)\n","\n","    # 최종 자본에 대한 수익률 계산\n","    final_return_rate = (cash - initial_capital) / initial_capital\n","\n","    # Benchmark index 수익률 계산\n","    start_p = float(nasdaq[nasdaq.index == backtest_df.index[0]]['price'])\n","    end_p = float(nasdaq[nasdaq.index == backtest_df.index[-1]]['price'])\n","    BM_value = end_p/start_p -1\n","\n","    return final_return_rate, portfolio_value, BM_value\n"],"metadata":{"id":"9F8MXzKYgwvB","executionInfo":{"status":"ok","timestamp":1688175911603,"user_tz":-540,"elapsed":4,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# def buysell_strategy2(backtest_df, nasdaq_df, initial_capital):\n","#     cash = initial_capital  # 초기 자본 설정\n","#     stocks = 0  # 주식 보유량 초기화\n","#     portfolio_value = []  # 포트폴리오 가치를 저장할 리스트\n","\n","#     # 날짜에 따른 정확한 매칭을 위해 DataFrame의 인덱스를 날짜로 설정\n","#     backtest_df.index = pd.to_datetime(backtest_df.index)\n","#     nasdaq_df.index = pd.to_datetime(nasdaq_df.index)\n","\n","#     for window in future_window:\n","#       for date in backtest_df.index:\n","#           # date = row.Index  # 현재 날짜 가져오기\n","#           if date in nasdaq_df.index:  # 현재 날짜가 nasdaq 데이터에 있을 경우\n","#               price = nasdaq_df.loc[date, 'price']  # 해당 날짜의 가격 가져오기\n","#               mean_p = backtest_df.loc[date, f'mean_{window}']  # mean 값을 가져오기\n","\n","#               # mean_p가 ~~ 이상일 경우, 자본의 %를 매수\n","#               if mean_p >= 0.05:\n","#                   buy_amount = cash * 0.7\n","#                   stock_amount = round(buy_amount / price)\n","#                   stocks += stock_amount\n","#                   cash -= stock_amount * price\n","#                   # print(\"Date:\",date.date(),\", buy price:\",price)\n","\n","#               # mean_p가 ~~ 이상일 경우, 자본의 %를 매수\n","#               elif mean_p >= 0.01:\n","#                   buy_amount = cash * 0.5\n","#                   stock_amount = round(buy_amount / price)\n","#                   stocks += stock_amount\n","#                   cash -= stock_amount * price\n","#                   # print(\"Date:\",date.date(),\", buy price:\",price)\n","\n","#               # mean_p가 ~~ 이하일 경우, 자본의 %를 매도\n","#               elif mean_p <= -0.05:\n","#                   sell_amount = round(stocks * 0.5)\n","#                   stocks -= sell_amount\n","#                   cash += sell_amount * price\n","#                   # print(\"Date:\",date.date(),\", sell price:\",price)\n","\n","#               # mean_p가 ~~ 이하일 경우, 자본의 %를 매도\n","#               elif mean_p <= -0.03:\n","#                   sell_amount = round(stocks * 0.7)\n","#                   stocks -= sell_amount\n","#                   cash += sell_amount * price\n","#                   # print(\"Date:\",date.date(),\", sell price:\",price)\n","\n","#               # 포트폴리오 총 가치 (현금 + 주식 가치) 계산 후 저장\n","#               total_value = cash + stocks * price\n","#               portfolio_value.append(total_value)\n","\n","#     # 백테스팅 종료 시점에 보유 중인 주식 전량 매도\n","#     if stocks > 0:\n","#         cash += stocks * price\n","#         stocks = 0\n","#         print(\"Date:\",date.date(),\", final sell price:\",price)\n","\n","#     # 최종 자본에 대한 수익률 계산\n","#     final_return_rate = (cash - initial_capital) / initial_capital\n","\n","#     # Benchmark index 수익률 계산\n","#     start_p = float(nasdaq[nasdaq.index == develop_test_df.index[0]]['price'])\n","#     end_p = float(nasdaq[nasdaq.index == develop_test_df.index[-1]]['price'])\n","#     BM_value = end_p/start_p -1\n","\n","#     return final_return_rate, portfolio_value, BM_value\n"],"metadata":{"id":"dNwFDOkn5ELn","executionInfo":{"status":"ok","timestamp":1688138909115,"user_tz":-540,"elapsed":289,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}}},"execution_count":160,"outputs":[]},{"cell_type":"code","source":["# 함수 사용\n","final_return_rate, portfolio_value, BM_value = buysell_strategy(develop_test_df, nasdaq, initial_capital=100000)\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')\n","print(f'BM 수익률: {BM_value * 100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-rqPVgLadAp","executionInfo":{"status":"ok","timestamp":1688138854918,"user_tz":-540,"elapsed":448,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"9401a4c2-358f-487f-c7ac-b5fcb1a9d37f"},"execution_count":156,"outputs":[{"output_type":"stream","name":"stdout","text":["Date: 2018-05-21 , buy price: 7394.0400390625\n","Date: 2018-06-12 , buy price: 7703.7900390625\n","Date: 2018-06-13 , buy price: 7695.7001953125\n","Date: 2018-06-14 , buy price: 7761.0400390625\n","Date: 2019-01-14 , buy price: 6905.919921875\n","Date: 2019-02-22 , buy price: 7527.5400390625\n","Date: 2019-02-26 , buy price: 7549.2998046875\n","Date: 2020-01-28 , sell price: 9269.6796875\n","Date: 2020-01-29 , sell price: 9275.16015625\n","Date: 2020-03-06 , sell price: 8575.6201171875\n","Date: 2020-03-09 , sell price: 7950.68017578125\n","Date: 2020-03-10 , sell price: 8344.25\n","Date: 2020-03-11 , sell price: 7952.0498046875\n","Date: 2020-03-12 , sell price: 7201.7998046875\n","Date: 2020-03-13 , sell price: 7874.8798828125\n","Date: 2020-03-16 , sell price: 6904.58984375\n","Date: 2020-03-17 , sell price: 7334.77978515625\n","Date: 2020-03-18 , sell price: 6989.83984375\n","Date: 2020-03-19 , sell price: 7150.580078125\n","Date: 2020-03-20 , sell price: 6879.52001953125\n","Date: 2020-04-14 , buy price: 8515.740234375\n","Date: 2020-04-16 , buy price: 8532.3603515625\n","Date: 2020-04-20 , buy price: 8560.73046875\n","Date: 2020-04-21 , buy price: 8263.23046875\n","Date: 2020-04-22 , buy price: 8495.3798828125\n","Date: 2020-04-23 , buy price: 8494.75\n","Date: 2020-04-24 , buy price: 8634.51953125\n","Date: 2020-05-05 , buy price: 8809.1201171875\n","Date: 2020-05-14 , buy price: 8943.7197265625\n","Date: 2020-05-20 , buy price: 9375.7802734375\n","Date: 2020-05-21 , buy price: 9284.8798828125\n","Date: 2020-05-22 , buy price: 9324.58984375\n","Date: 2020-05-26 , buy price: 9340.2197265625\n","Date: 2020-05-27 , buy price: 9412.3603515625\n","Date: 2020-05-28 , buy price: 9368.990234375\n","Date: 2020-05-29 , buy price: 9489.8701171875\n","Date: 2020-06-01 , buy price: 9552.0498046875\n","Date: 2020-06-02 , buy price: 9608.3798828125\n","Date: 2020-06-16 , buy price: 9895.8701171875\n","Date: 2020-06-17 , buy price: 9910.5302734375\n","Date: 2020-06-19 , buy price: 9946.1201171875\n","Date: 2020-06-22 , buy price: 10056.48046875\n","Date: 2020-06-30 , buy price: 10058.76953125\n","Date: 2020-10-19 , buy price: 11478.8798828125\n","Date: 2020-10-20 , buy price: 11516.490234375\n","Date: 2020-12-01 , sell price: 12355.1103515625\n","Date: 2020-12-31 , final sell price: 12888.2802734375\n","최종 수익률: 78.47%\n","BM 수익률: 86.69%\n"]}]},{"cell_type":"markdown","source":["## future test"],"metadata":{"id":"nQAmZruqalOA"}},{"cell_type":"code","source":["future_test_df = calculate_returns('2021-01-01', '2023-06-15', nasdaq, train_20df, future_window)\n","future_test_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"YSZZBGMkz5lY","executionInfo":{"status":"ok","timestamp":1688138260224,"user_tz":-540,"elapsed":486108,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"7488b6e3-5b82-49e1-8a18-7294d746367a"},"execution_count":140,"outputs":[{"output_type":"stream","name":"stdout","text":["your target date 2021-01-01 00:00:00 is not in index\n","your target date 2021-01-02 00:00:00 is not in index\n","your target date 2021-01-03 00:00:00 is not in index\n","your target date 2021-01-09 00:00:00 is not in index\n","your target date 2021-01-10 00:00:00 is not in index\n","your target date 2021-01-16 00:00:00 is not in index\n","your target date 2021-01-17 00:00:00 is not in index\n","your target date 2021-01-18 00:00:00 is not in index\n","your target date 2021-01-23 00:00:00 is not in index\n","your target date 2021-01-24 00:00:00 is not in index\n","your target date 2021-01-30 00:00:00 is not in index\n","your target date 2021-01-31 00:00:00 is not in index\n","your target date 2021-02-06 00:00:00 is not in index\n","your target date 2021-02-07 00:00:00 is not in index\n","your target date 2021-02-13 00:00:00 is not in index\n","your target date 2021-02-14 00:00:00 is not in index\n","your target date 2021-02-15 00:00:00 is not in index\n","your target date 2021-02-20 00:00:00 is not in index\n","your target date 2021-02-21 00:00:00 is not in index\n","your target date 2021-02-27 00:00:00 is not in index\n","your target date 2021-02-28 00:00:00 is not in index\n","your target date 2021-03-06 00:00:00 is not in index\n","your target date 2021-03-07 00:00:00 is not in index\n","your target date 2021-03-13 00:00:00 is not in index\n","your target date 2021-03-14 00:00:00 is not in index\n","your target date 2021-03-20 00:00:00 is not in index\n","your target date 2021-03-21 00:00:00 is not in index\n","your target date 2021-03-27 00:00:00 is not in index\n","your target date 2021-03-28 00:00:00 is not in index\n","your target date 2021-04-02 00:00:00 is not in index\n","your target date 2021-04-03 00:00:00 is not in index\n","your target date 2021-04-04 00:00:00 is not in index\n","your target date 2021-04-10 00:00:00 is not in index\n","your target date 2021-04-11 00:00:00 is not in index\n","your target date 2021-04-17 00:00:00 is not in index\n","your target date 2021-04-18 00:00:00 is not in index\n","your target date 2021-04-24 00:00:00 is not in index\n","your target date 2021-04-25 00:00:00 is not in index\n","your target date 2021-05-01 00:00:00 is not in index\n","your target date 2021-05-02 00:00:00 is not in index\n","your target date 2021-05-08 00:00:00 is not in index\n","your target date 2021-05-09 00:00:00 is not in index\n","your target date 2021-05-15 00:00:00 is not in index\n","your target date 2021-05-16 00:00:00 is not in index\n","your target date 2021-05-22 00:00:00 is not in index\n","your target date 2021-05-23 00:00:00 is not in index\n","your target date 2021-05-29 00:00:00 is not in index\n","your target date 2021-05-30 00:00:00 is not in index\n","your target date 2021-05-31 00:00:00 is not in index\n","your target date 2021-06-05 00:00:00 is not in index\n","your target date 2021-06-06 00:00:00 is not in index\n","your target date 2021-06-12 00:00:00 is not in index\n","your target date 2021-06-13 00:00:00 is not in index\n","your target date 2021-06-19 00:00:00 is not in index\n","your target date 2021-06-20 00:00:00 is not in index\n","your target date 2021-06-26 00:00:00 is not in index\n","your target date 2021-06-27 00:00:00 is not in index\n","your target date 2021-07-03 00:00:00 is not in index\n","your target date 2021-07-04 00:00:00 is not in index\n","your target date 2021-07-05 00:00:00 is not in index\n","your target date 2021-07-10 00:00:00 is not in index\n","your target date 2021-07-11 00:00:00 is not in index\n","your target date 2021-07-17 00:00:00 is not in index\n","your target date 2021-07-18 00:00:00 is not in index\n","your target date 2021-07-24 00:00:00 is not in index\n","your target date 2021-07-25 00:00:00 is not in index\n","your target date 2021-07-31 00:00:00 is not in index\n","your target date 2021-08-01 00:00:00 is not in index\n","your target date 2021-08-07 00:00:00 is not in index\n","your target date 2021-08-08 00:00:00 is not in index\n","your target date 2021-08-14 00:00:00 is not in index\n","your target date 2021-08-15 00:00:00 is not in index\n","your target date 2021-08-21 00:00:00 is not in index\n","your target date 2021-08-22 00:00:00 is not in index\n","your target date 2021-08-28 00:00:00 is not in index\n","your target date 2021-08-29 00:00:00 is not in index\n","your target date 2021-09-04 00:00:00 is not in index\n","your target date 2021-09-05 00:00:00 is not in index\n","your target date 2021-09-06 00:00:00 is not in index\n","your target date 2021-09-11 00:00:00 is not in index\n","your target date 2021-09-12 00:00:00 is not in index\n","your target date 2021-09-18 00:00:00 is not in index\n","your target date 2021-09-19 00:00:00 is not in index\n","your target date 2021-09-25 00:00:00 is not in index\n","your target date 2021-09-26 00:00:00 is not in index\n","your target date 2021-10-02 00:00:00 is not in index\n","your target date 2021-10-03 00:00:00 is not in index\n","your target date 2021-10-09 00:00:00 is not in index\n","your target date 2021-10-10 00:00:00 is not in index\n","your target date 2021-10-16 00:00:00 is not in index\n","your target date 2021-10-17 00:00:00 is not in index\n","your target date 2021-10-23 00:00:00 is not in index\n","your target date 2021-10-24 00:00:00 is not in index\n","your target date 2021-10-30 00:00:00 is not in index\n","your target date 2021-10-31 00:00:00 is not in index\n","your target date 2021-11-06 00:00:00 is not in index\n","your target date 2021-11-07 00:00:00 is not in index\n","your target date 2021-11-13 00:00:00 is not in index\n","your target date 2021-11-14 00:00:00 is not in index\n","your target date 2021-11-20 00:00:00 is not in index\n","your target date 2021-11-21 00:00:00 is not in index\n","your target date 2021-11-25 00:00:00 is not in index\n","your target date 2021-11-27 00:00:00 is not in index\n","your target date 2021-11-28 00:00:00 is not in index\n","your target date 2021-12-04 00:00:00 is not in index\n","your target date 2021-12-05 00:00:00 is not in index\n","your target date 2021-12-11 00:00:00 is not in index\n","your target date 2021-12-12 00:00:00 is not in index\n","your target date 2021-12-18 00:00:00 is not in index\n","your target date 2021-12-19 00:00:00 is not in index\n","your target date 2021-12-24 00:00:00 is not in index\n","your target date 2021-12-25 00:00:00 is not in index\n","your target date 2021-12-26 00:00:00 is not in index\n","your target date 2022-01-01 00:00:00 is not in index\n","your target date 2022-01-02 00:00:00 is not in index\n","your target date 2022-01-08 00:00:00 is not in index\n","your target date 2022-01-09 00:00:00 is not in index\n","your target date 2022-01-15 00:00:00 is not in index\n","your target date 2022-01-16 00:00:00 is not in index\n","your target date 2022-01-17 00:00:00 is not in index\n","your target date 2022-01-22 00:00:00 is not in index\n","your target date 2022-01-23 00:00:00 is not in index\n","your target date 2022-01-29 00:00:00 is not in index\n","your target date 2022-01-30 00:00:00 is not in index\n","your target date 2022-02-05 00:00:00 is not in index\n","your target date 2022-02-06 00:00:00 is not in index\n","your target date 2022-02-12 00:00:00 is not in index\n","your target date 2022-02-13 00:00:00 is not in index\n","your target date 2022-02-19 00:00:00 is not in index\n","your target date 2022-02-20 00:00:00 is not in index\n","your target date 2022-02-21 00:00:00 is not in index\n","your target date 2022-02-26 00:00:00 is not in index\n","your target date 2022-02-27 00:00:00 is not in index\n","your target date 2022-03-05 00:00:00 is not in index\n","your target date 2022-03-06 00:00:00 is not in index\n","your target date 2022-03-12 00:00:00 is not in index\n","your target date 2022-03-13 00:00:00 is not in index\n","your target date 2022-03-19 00:00:00 is not in index\n","your target date 2022-03-20 00:00:00 is not in index\n","your target date 2022-03-26 00:00:00 is not in index\n","your target date 2022-03-27 00:00:00 is not in index\n","your target date 2022-04-02 00:00:00 is not in index\n","your target date 2022-04-03 00:00:00 is not in index\n","your target date 2022-04-09 00:00:00 is not in index\n","your target date 2022-04-10 00:00:00 is not in index\n","your target date 2022-04-15 00:00:00 is not in index\n","your target date 2022-04-16 00:00:00 is not in index\n","your target date 2022-04-17 00:00:00 is not in index\n","your target date 2022-04-23 00:00:00 is not in index\n","your target date 2022-04-24 00:00:00 is not in index\n","your target date 2022-04-30 00:00:00 is not in index\n","your target date 2022-05-01 00:00:00 is not in index\n","your target date 2022-05-07 00:00:00 is not in index\n","your target date 2022-05-08 00:00:00 is not in index\n","your target date 2022-05-14 00:00:00 is not in index\n","your target date 2022-05-15 00:00:00 is not in index\n","your target date 2022-05-21 00:00:00 is not in index\n","your target date 2022-05-22 00:00:00 is not in index\n","your target date 2022-05-28 00:00:00 is not in index\n","your target date 2022-05-29 00:00:00 is not in index\n","your target date 2022-05-30 00:00:00 is not in index\n","your target date 2022-06-04 00:00:00 is not in index\n","your target date 2022-06-05 00:00:00 is not in index\n","your target date 2022-06-11 00:00:00 is not in index\n","your target date 2022-06-12 00:00:00 is not in index\n","your target date 2022-06-18 00:00:00 is not in index\n","your target date 2022-06-19 00:00:00 is not in index\n","your target date 2022-06-20 00:00:00 is not in index\n","your target date 2022-06-25 00:00:00 is not in index\n","your target date 2022-06-26 00:00:00 is not in index\n","your target date 2022-07-02 00:00:00 is not in index\n","your target date 2022-07-03 00:00:00 is not in index\n","your target date 2022-07-04 00:00:00 is not in index\n","your target date 2022-07-09 00:00:00 is not in index\n","your target date 2022-07-10 00:00:00 is not in index\n","your target date 2022-07-16 00:00:00 is not in index\n","your target date 2022-07-17 00:00:00 is not in index\n","your target date 2022-07-23 00:00:00 is not in index\n","your target date 2022-07-24 00:00:00 is not in index\n","your target date 2022-07-30 00:00:00 is not in index\n","your target date 2022-07-31 00:00:00 is not in index\n","your target date 2022-08-06 00:00:00 is not in index\n","your target date 2022-08-07 00:00:00 is not in index\n","your target date 2022-08-13 00:00:00 is not in index\n","your target date 2022-08-14 00:00:00 is not in index\n","your target date 2022-08-20 00:00:00 is not in index\n","your target date 2022-08-21 00:00:00 is not in index\n","your target date 2022-08-27 00:00:00 is not in index\n","your target date 2022-08-28 00:00:00 is not in index\n","your target date 2022-09-03 00:00:00 is not in index\n","your target date 2022-09-04 00:00:00 is not in index\n","your target date 2022-09-05 00:00:00 is not in index\n","your target date 2022-09-10 00:00:00 is not in index\n","your target date 2022-09-11 00:00:00 is not in index\n","your target date 2022-09-17 00:00:00 is not in index\n","your target date 2022-09-18 00:00:00 is not in index\n","your target date 2022-09-24 00:00:00 is not in index\n","your target date 2022-09-25 00:00:00 is not in index\n","your target date 2022-10-01 00:00:00 is not in index\n","your target date 2022-10-02 00:00:00 is not in index\n","your target date 2022-10-08 00:00:00 is not in index\n","your target date 2022-10-09 00:00:00 is not in index\n","your target date 2022-10-15 00:00:00 is not in index\n","your target date 2022-10-16 00:00:00 is not in index\n","your target date 2022-10-22 00:00:00 is not in index\n","your target date 2022-10-23 00:00:00 is not in index\n","your target date 2022-10-29 00:00:00 is not in index\n","your target date 2022-10-30 00:00:00 is not in index\n","your target date 2022-11-05 00:00:00 is not in index\n","your target date 2022-11-06 00:00:00 is not in index\n","your target date 2022-11-12 00:00:00 is not in index\n","your target date 2022-11-13 00:00:00 is not in index\n","your target date 2022-11-19 00:00:00 is not in index\n","your target date 2022-11-20 00:00:00 is not in index\n","your target date 2022-11-24 00:00:00 is not in index\n","your target date 2022-11-26 00:00:00 is not in index\n","your target date 2022-11-27 00:00:00 is not in index\n","your target date 2022-12-03 00:00:00 is not in index\n","your target date 2022-12-04 00:00:00 is not in index\n","your target date 2022-12-10 00:00:00 is not in index\n","your target date 2022-12-11 00:00:00 is not in index\n","your target date 2022-12-17 00:00:00 is not in index\n","your target date 2022-12-18 00:00:00 is not in index\n","your target date 2022-12-24 00:00:00 is not in index\n","your target date 2022-12-25 00:00:00 is not in index\n","your target date 2022-12-26 00:00:00 is not in index\n","your target date 2022-12-31 00:00:00 is not in index\n","your target date 2023-01-01 00:00:00 is not in index\n","your target date 2023-01-02 00:00:00 is not in index\n","your target date 2023-01-07 00:00:00 is not in index\n","your target date 2023-01-08 00:00:00 is not in index\n","your target date 2023-01-14 00:00:00 is not in index\n","your target date 2023-01-15 00:00:00 is not in index\n","your target date 2023-01-16 00:00:00 is not in index\n","your target date 2023-01-21 00:00:00 is not in index\n","your target date 2023-01-22 00:00:00 is not in index\n","your target date 2023-01-28 00:00:00 is not in index\n","your target date 2023-01-29 00:00:00 is not in index\n","your target date 2023-02-04 00:00:00 is not in index\n","your target date 2023-02-05 00:00:00 is not in index\n","your target date 2023-02-11 00:00:00 is not in index\n","your target date 2023-02-12 00:00:00 is not in index\n","your target date 2023-02-18 00:00:00 is not in index\n","your target date 2023-02-19 00:00:00 is not in index\n","your target date 2023-02-20 00:00:00 is not in index\n","your target date 2023-02-25 00:00:00 is not in index\n","your target date 2023-02-26 00:00:00 is not in index\n","your target date 2023-03-04 00:00:00 is not in index\n","your target date 2023-03-05 00:00:00 is not in index\n","your target date 2023-03-11 00:00:00 is not in index\n","your target date 2023-03-12 00:00:00 is not in index\n","your target date 2023-03-18 00:00:00 is not in index\n","your target date 2023-03-19 00:00:00 is not in index\n","your target date 2023-03-25 00:00:00 is not in index\n","your target date 2023-03-26 00:00:00 is not in index\n","your target date 2023-04-01 00:00:00 is not in index\n","your target date 2023-04-02 00:00:00 is not in index\n","your target date 2023-04-07 00:00:00 is not in index\n","your target date 2023-04-08 00:00:00 is not in index\n","your target date 2023-04-09 00:00:00 is not in index\n","your target date 2023-04-15 00:00:00 is not in index\n","your target date 2023-04-16 00:00:00 is not in index\n","your target date 2023-04-22 00:00:00 is not in index\n","your target date 2023-04-23 00:00:00 is not in index\n","your target date 2023-04-29 00:00:00 is not in index\n","your target date 2023-04-30 00:00:00 is not in index\n","your target date 2023-05-06 00:00:00 is not in index\n","your target date 2023-05-07 00:00:00 is not in index\n","your target date 2023-05-13 00:00:00 is not in index\n","your target date 2023-05-14 00:00:00 is not in index\n","your target date 2023-05-20 00:00:00 is not in index\n","your target date 2023-05-21 00:00:00 is not in index\n","your target date 2023-05-27 00:00:00 is not in index\n","your target date 2023-05-28 00:00:00 is not in index\n","your target date 2023-05-29 00:00:00 is not in index\n","your target date 2023-06-03 00:00:00 is not in index\n","your target date 2023-06-04 00:00:00 is not in index\n","your target date 2023-06-10 00:00:00 is not in index\n","your target date 2023-06-11 00:00:00 is not in index\n"]},{"output_type":"execute_result","data":{"text/plain":["            return_5    mean_5     std_5\n","2020-12-31   0.02434  0.008432  0.021354\n","2021-01-04  0.026616 -0.005232  0.024674\n","2021-01-05  0.019773 -0.003729  0.030784\n","2021-01-06  0.030466  0.000387  0.038483\n","2021-01-07  0.003456  0.003933  0.049943\n","...              ...       ...       ...\n","2023-06-09  0.032463  0.005499  0.024696\n","2023-06-12  0.015256  0.012256  0.030853\n","2023-06-13  -0.00524  0.012987  0.026596\n","2023-06-14  0.000303  0.009163  0.026327\n","2023-06-15 -0.021063 -0.001557  0.029374\n","\n","[618 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-697fa3e6-71c4-44c0-8846-88dbf1974dba\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>return_5</th>\n","      <th>mean_5</th>\n","      <th>std_5</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2020-12-31</th>\n","      <td>0.02434</td>\n","      <td>0.008432</td>\n","      <td>0.021354</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-04</th>\n","      <td>0.026616</td>\n","      <td>-0.005232</td>\n","      <td>0.024674</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-05</th>\n","      <td>0.019773</td>\n","      <td>-0.003729</td>\n","      <td>0.030784</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-06</th>\n","      <td>0.030466</td>\n","      <td>0.000387</td>\n","      <td>0.038483</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-07</th>\n","      <td>0.003456</td>\n","      <td>0.003933</td>\n","      <td>0.049943</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-09</th>\n","      <td>0.032463</td>\n","      <td>0.005499</td>\n","      <td>0.024696</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-12</th>\n","      <td>0.015256</td>\n","      <td>0.012256</td>\n","      <td>0.030853</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-13</th>\n","      <td>-0.00524</td>\n","      <td>0.012987</td>\n","      <td>0.026596</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-14</th>\n","      <td>0.000303</td>\n","      <td>0.009163</td>\n","      <td>0.026327</td>\n","    </tr>\n","    <tr>\n","      <th>2023-06-15</th>\n","      <td>-0.021063</td>\n","      <td>-0.001557</td>\n","      <td>0.029374</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>618 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-697fa3e6-71c4-44c0-8846-88dbf1974dba')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-697fa3e6-71c4-44c0-8846-88dbf1974dba button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-697fa3e6-71c4-44c0-8846-88dbf1974dba');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":140}]},{"cell_type":"code","source":["result = check_result(future_test_df, future_window)\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sj6DypLI2KC2","executionInfo":{"status":"ok","timestamp":1688138347123,"user_tz":-540,"elapsed":5,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"d23ec7e9-e9ef-44f5-c5b1-1d3f1c981d41"},"execution_count":143,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'result_5': {'soso_5': 111,\n","  'large_std_5': 3,\n","  'pos_true_5': 156,\n","  'pos_false_5': 153,\n","  'neg_true_5': 77,\n","  'neg_false_5': 118,\n","  'error_mean': -0.0010388891836603344,\n","  'error_std': 0.03275121618192497}}"]},"metadata":{},"execution_count":143}]},{"cell_type":"code","source":["# 함수 사용\n","final_return_rate, portfolio_value, BM_value = buysell_strategy(future_test_df, nasdaq, initial_capital=100000)\n","print(f'최종 수익률: {final_return_rate * 100:.2f}%')\n","print(f'BM 수익률: {BM_value * 100:.2f}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":232},"id":"dx8CSHgB4lPg","executionInfo":{"status":"error","timestamp":1688175936864,"user_tz":-540,"elapsed":1029,"user":{"displayName":"이하림학부생","userId":"10320128737564412082"}},"outputId":"d3403d3b-1d8b-4e2a-b630-0a8b8f7aa4d3"},"execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-b02c4ef9b556>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# 함수 사용\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mfinal_return_rate\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mportfolio_value\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBM_value\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuysell_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfuture_test_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnasdaq\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial_capital\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'최종 수익률: {final_return_rate * 100:.2f}%'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'BM 수익률: {BM_value * 100:.2f}%'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'future_test_df' is not defined"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1VNZqO7UkAsE4JrzWz-CmYFf8n8CjpZQ-","timestamp":1687521763752}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":true,"toc_window_display":false},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}